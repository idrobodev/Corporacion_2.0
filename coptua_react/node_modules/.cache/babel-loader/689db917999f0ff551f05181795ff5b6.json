{"ast":null,"code":"import { apiService, ROLES } from './apiService';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await apiService.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    return await apiService.hasPermission(requiredRole);\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    return await apiService.getDashboardData();\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    return await apiService.getParticipantes();\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    return await apiService.getMensualidades();\n  }\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    return await apiService.createParticipante(participanteData);\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    return await apiService.updateParticipante(id, participanteData);\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    return await apiService.deleteParticipante(id);\n  }\n\n  // Obtener sedes\n  async getSedes() {\n    return await apiService.getSedes();\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    return await apiService.createMensualidad(mensualidadData);\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    return await apiService.updateMensualidad(id, mensualidadData);\n  }\n\n  // Verificar conexión con la API\n  async testConnection() {\n    return await apiService.testConnection();\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return apiService.getApiConfig();\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;","map":{"version":3,"names":["apiService","ROLES","DatabaseService","getCurrentUser","hasPermission","requiredRole","getDashboardData","getParticipantes","getMensualidades","createParticipante","participanteData","updateParticipante","id","deleteParticipante","getSedes","createMensualidad","mensualidadData","updateMensualidad","testConnection","getApiConfig","dbService"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/services/databaseService.js"],"sourcesContent":["import { apiService, ROLES } from './apiService';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\n\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await apiService.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    return await apiService.hasPermission(requiredRole);\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    return await apiService.getDashboardData();\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    return await apiService.getParticipantes();\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    return await apiService.getMensualidades();\n  }\n\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    return await apiService.createParticipante(participanteData);\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    return await apiService.updateParticipante(id, participanteData);\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    return await apiService.deleteParticipante(id);\n  }\n\n  // Obtener sedes\n  async getSedes() {\n    return await apiService.getSedes();\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    return await apiService.createMensualidad(mensualidadData);\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    return await apiService.updateMensualidad(id, mensualidadData);\n  }\n\n  // Verificar conexión con la API\n  async testConnection() {\n    return await apiService.testConnection();\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return apiService.getApiConfig();\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,KAAK,QAAQ,cAAc;;AAEhD;AACA,SAASA,KAAK;AAEd,MAAMC,eAAe,CAAC;EACpB;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,OAAO,MAAMH,UAAU,CAACG,cAAc,CAAC,CAAC;EAC1C;;EAEA;EACA,MAAMC,aAAaA,CAACC,YAAY,EAAE;IAChC,OAAO,MAAML,UAAU,CAACI,aAAa,CAACC,YAAY,CAAC;EACrD;;EAEA;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,MAAMN,UAAU,CAACM,gBAAgB,CAAC,CAAC;EAC5C;;EAEA;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,MAAMP,UAAU,CAACO,gBAAgB,CAAC,CAAC;EAC5C;;EAEA;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,MAAMR,UAAU,CAACQ,gBAAgB,CAAC,CAAC;EAC5C;;EAGA;EACA,MAAMC,kBAAkBA,CAACC,gBAAgB,EAAE;IACzC,OAAO,MAAMV,UAAU,CAACS,kBAAkB,CAACC,gBAAgB,CAAC;EAC9D;;EAEA;EACA,MAAMC,kBAAkBA,CAACC,EAAE,EAAEF,gBAAgB,EAAE;IAC7C,OAAO,MAAMV,UAAU,CAACW,kBAAkB,CAACC,EAAE,EAAEF,gBAAgB,CAAC;EAClE;;EAEA;EACA,MAAMG,kBAAkBA,CAACD,EAAE,EAAE;IAC3B,OAAO,MAAMZ,UAAU,CAACa,kBAAkB,CAACD,EAAE,CAAC;EAChD;;EAEA;EACA,MAAME,QAAQA,CAAA,EAAG;IACf,OAAO,MAAMd,UAAU,CAACc,QAAQ,CAAC,CAAC;EACpC;;EAEA;EACA,MAAMC,iBAAiBA,CAACC,eAAe,EAAE;IACvC,OAAO,MAAMhB,UAAU,CAACe,iBAAiB,CAACC,eAAe,CAAC;EAC5D;;EAEA;EACA,MAAMC,iBAAiBA,CAACL,EAAE,EAAEI,eAAe,EAAE;IAC3C,OAAO,MAAMhB,UAAU,CAACiB,iBAAiB,CAACL,EAAE,EAAEI,eAAe,CAAC;EAChE;;EAEA;EACA,MAAME,cAAcA,CAAA,EAAG;IACrB,OAAO,MAAMlB,UAAU,CAACkB,cAAc,CAAC,CAAC;EAC1C;;EAEA;EACAC,YAAYA,CAAA,EAAG;IACb,OAAOnB,UAAU,CAACmB,YAAY,CAAC,CAAC;EAClC;AACF;;AAEA;AACA,OAAO,MAAMC,SAAS,GAAG,IAAIlB,eAAe,CAAC,CAAC;AAC9C,eAAekB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}