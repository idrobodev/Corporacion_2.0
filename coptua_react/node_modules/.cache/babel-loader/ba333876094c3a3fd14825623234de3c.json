{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { applySettingDefaults, validateSupabaseUrl } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.storage Options passed along to the storage-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    const baseUrl = validateSupabaseUrl(supabaseUrl);\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    this.realtimeUrl = new URL('realtime/v1', baseUrl);\n    this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws');\n    this.authUrl = new URL('auth/v1', baseUrl);\n    this.storageUrl = new URL('storage/v1', baseUrl);\n    this.functionsUrl = new URL('functions/v1', baseUrl);\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`;\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n    this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n    if (!settings.accessToken) {\n      this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n    } else {\n      this.accessToken = settings.accessToken;\n      this.auth = new Proxy({}, {\n        get: (_, prop) => {\n          throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n        }\n      });\n    }\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers,\n      accessToken: this._getAccessToken.bind(this)\n    }, settings.realtime));\n    this.rest = new PostgrestClient(new URL('rest/v1', baseUrl).href, {\n      headers: this.headers,\n      schema: settings.db.schema,\n      fetch: this.fetch\n    });\n    this.storage = new SupabaseStorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);\n    if (!settings.accessToken) {\n      this._listenForAuthEvents();\n    }\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl.href, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema(schema) {\n    return this.rest.schema(schema);\n  }\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc(fn, args = {}, options = {}) {\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name, opts = {\n    config: {}\n  }) {\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n  _getAccessToken() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.accessToken) {\n        return yield this.accessToken();\n      }\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n    });\n  }\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    storage,\n    userStorage,\n    storageKey,\n    flowType,\n    lock,\n    debug\n  }, headers, fetch) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl.href,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      userStorage,\n      flowType,\n      lock,\n      debug,\n      fetch,\n      // auth checks if there is a custom authorizaiton header using this flag\n      // so it knows whether to return an error when getUser is called with no session\n      hasCustomAuthorizationHeader: Object.keys(this.headers).some(key => key.toLowerCase() === 'authorization')\n    });\n  }\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n    });\n    return data;\n  }\n  _handleTokenChanged(event, source, token) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT') {\n      this.realtime.setAuth();\n      if (source == 'STORAGE') this.auth.signOut();\n      this.changedAccessToken = undefined;\n    }\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","fetchWithAuth","applySettingDefaults","validateSupabaseUrl","SupabaseAuthClient","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","_a","_b","_c","baseUrl","Error","realtimeUrl","URL","protocol","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","headers","accessToken","_initSupabaseAuthClient","fetch","Proxy","get","_","prop","String","_getAccessToken","bind","_initRealtimeClient","rest","href","schema","storage","_listenForAuthEvents","functions","customFetch","from","relation","rpc","fn","args","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","autoRefreshToken","persistSession","detectSessionInUrl","userStorage","flowType","lock","debug","authHeaders","Authorization","apikey","url","hasCustomAuthorizationHeader","keys","some","key","toLowerCase","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","undefined"],"sources":["/Users/todoporunalma/Desktop/coptua_react/node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { applySettingDefaults, validateSupabaseUrl } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.storage Options passed along to the storage-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        const baseUrl = validateSupabaseUrl(supabaseUrl);\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        this.realtimeUrl = new URL('realtime/v1', baseUrl);\n        this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws');\n        this.authUrl = new URL('auth/v1', baseUrl);\n        this.storageUrl = new URL('storage/v1', baseUrl);\n        this.functionsUrl = new URL('functions/v1', baseUrl);\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new PostgrestClient(new URL('rest/v1', baseUrl).href, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        this.storage = new SupabaseStorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl.href, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, userStorage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl.href,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            userStorage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: Object.keys(this.headers).some((key) => key.toLowerCase() === 'authorization'),\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}