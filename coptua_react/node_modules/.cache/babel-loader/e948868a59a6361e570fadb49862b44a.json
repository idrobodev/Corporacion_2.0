{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, put, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.shouldThrowOnError = false;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Enable throwing errors instead of returning them.\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        const metadata = options.metadata;\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n          if (metadata) {\n            headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n          }\n        }\n        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const data = yield (method == 'PUT' ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        return {\n          data: {\n            path: cleanPath,\n            id: data.Id,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n      const _path = this._getFinalPath(cleanPath);\n      const url = new URL(this.url + `/object/upload/sign/${_path}`);\n      url.searchParams.set('token', token);\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n        const data = yield put(this.fetch, url.toString(), body, {\n          headers\n        });\n        return {\n          data: {\n            path: cleanPath,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n   */\n  createSignedUploadUrl(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        const headers = Object.assign({}, this.headers);\n        if (options === null || options === void 0 ? void 0 : options.upsert) {\n          headers['x-upsert'] = 'true';\n        }\n        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n          headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   * @param options The destination options.\n   */\n  move(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   * @param options The destination options.\n   */\n  copy(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n      try {\n        const _path = this._getFinalPath(path);\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing file.\n   * @param path\n   */\n  info(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n          headers: this.headers\n        });\n        return {\n          data: recursiveToCamel(data),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Checks the existence of a file.\n   * @param path\n   */\n  exists(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        yield head(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers\n        });\n        return {\n          data: true,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error) && error instanceof StorageUnknownError) {\n          const originalError = error.originalError;\n          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n            return {\n              data: false,\n              error\n            };\n          }\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n    let queryString = _queryString.join('&');\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Lists all the files and folders within a path of the bucket.\n   * @param path The folder path.\n   * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * @experimental this method signature might change in the future\n   * @param options search options\n   * @param parameters\n   */\n  listV2(options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign({}, options);\n        const data = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  encodeMetadata(metadata) {\n    return JSON.stringify(metadata);\n  }\n  toBase64(data) {\n    if (typeof Buffer !== 'undefined') {\n      return Buffer.from(data).toString('base64');\n    }\n    return btoa(data);\n  }\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n  transformOptsToQueryString(transform) {\n    const params = [];\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`);\n    }\n    return params.join('&');\n  }\n}","map":{"version":3,"sources":["../../../src/packages/StorageFileApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, put, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.shouldThrowOnError = false;\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const data = yield (method == 'PUT' ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({ headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                return {\n                    data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const data = yield put(this.fetch, url.toString(), body, { headers });\n                return {\n                    data: { path: cleanPath, fullPath: data.Key },\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: recursiveToCamel(data), error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield head(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error) && error instanceof StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files and folders within a path of the bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign({}, options);\n                const data = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map"]},"metadata":{},"sourceType":"module"}