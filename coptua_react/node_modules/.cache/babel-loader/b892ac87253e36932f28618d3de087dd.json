{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Configuración de Supabase usando variables de entorno\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Verificar que las variables de entorno estén configuradas\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️ Supabase credentials not found in environment variables');\n  console.warn('Please add REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY to your .env file');\n\n  // En desarrollo, mostrar ayuda adicional\n  if (process.env.NODE_ENV === 'development') {\n    console.warn('💡 Create a .env file in the root directory with:');\n    console.warn('REACT_APP_SUPABASE_URL=your_supabase_url');\n    console.warn('REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key');\n  }\n}\n\n// Validar URLs de Supabase\nconst isValidSupabaseUrl = url => {\n  if (!url) return false;\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname.includes('supabase.co') || urlObj.hostname.includes('localhost');\n  } catch {\n    return false;\n  }\n};\n\n// Crear cliente de Supabase con validación\nconst createSupabaseClient = () => {\n  const url = supabaseUrl || 'https://placeholder.supabase.co';\n  const key = supabaseAnonKey || 'placeholder-key';\n  if (!isValidSupabaseUrl(supabaseUrl) && process.env.NODE_ENV === 'production') {\n    throw new Error('Invalid Supabase URL in production environment');\n  }\n  return createClient(url, key, {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: true,\n      flowType: 'pkce'\n    },\n    db: {\n      schema: 'public'\n    },\n    global: {\n      headers: {\n        'X-Client-Info': 'todo-por-un-alma-web'\n      }\n    }\n  });\n};\nexport const supabase = createSupabaseClient();\n\n// Helpers de autenticación para compatibilidad\nexport const authHelpers = {\n  // Iniciar sesión con email y contraseña\n  signIn: async (email, password) => {\n    return await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n  },\n  // Obtener usuario actual\n  getCurrentUser: async () => {\n    return await supabase.auth.getUser();\n  },\n  // Cerrar sesión\n  signOut: async () => {\n    return await supabase.auth.signOut();\n  },\n  // Escuchar cambios de autenticación\n  onAuthStateChange: callback => {\n    return supabase.auth.onAuthStateChange(callback);\n  },\n  // Restablecer contraseña\n  resetPassword: async (email, options = {}) => {\n    return await supabase.auth.resetPasswordForEmail(email, options);\n  }\n};\n\n// Verificar conexión con Supabase\nexport const testConnection = async () => {\n  try {\n    const {\n      error\n    } = await supabase.auth.getSession();\n    if (error) {\n      console.error('Supabase connection error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n\n    // Test básico de conectividad a la base de datos\n    const {\n      error: dbError\n    } = await supabase.from('usuarios').select('count', {\n      count: 'exact',\n      head: true\n    });\n    if (dbError) {\n      console.warn('Database connection warning:', dbError.message);\n      return {\n        success: true,\n        warning: 'Auth OK, but database may not be configured'\n      };\n    }\n    console.log('✅ Supabase connection successful');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Supabase connection failed:', error.message);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Verificar estado de la configuración\nexport const getConfigStatus = () => {\n  return {\n    hasUrl: !!supabaseUrl,\n    hasKey: !!supabaseAnonKey,\n    isValidUrl: isValidSupabaseUrl(supabaseUrl),\n    environment: process.env.NODE_ENV,\n    isConfigured: !!(supabaseUrl && supabaseAnonKey && isValidSupabaseUrl(supabaseUrl))\n  };\n};\nexport default supabase;\nexport const TABLES = {\n  FUNDACION: 'fundacion',\n  SEDES: 'sedes',\n  USUARIOS: 'usuarios',\n  PARTICIPANTES: 'participantes',\n  MENSUALIDADES: 'mensualidades'\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","warn","NODE_ENV","isValidSupabaseUrl","url","urlObj","URL","hostname","includes","createSupabaseClient","key","Error","auth","autoRefreshToken","persistSession","detectSessionInUrl","flowType","db","schema","global","headers","supabase","authHelpers","signIn","email","password","signInWithPassword","getCurrentUser","getUser","signOut","onAuthStateChange","callback","resetPassword","options","resetPasswordForEmail","testConnection","error","getSession","message","success","dbError","from","select","count","head","warning","log","getConfigStatus","hasUrl","hasKey","isValidUrl","environment","isConfigured","TABLES","FUNDACION","SEDES","USUARIOS","PARTICIPANTES","MENSUALIDADES"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/supabase/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Configuración de Supabase usando variables de entorno\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Verificar que las variables de entorno estén configuradas\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️ Supabase credentials not found in environment variables');\n  console.warn('Please add REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY to your .env file');\n  \n  // En desarrollo, mostrar ayuda adicional\n  if (process.env.NODE_ENV === 'development') {\n    console.warn('💡 Create a .env file in the root directory with:');\n    console.warn('REACT_APP_SUPABASE_URL=your_supabase_url');\n    console.warn('REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key');\n  }\n}\n\n// Validar URLs de Supabase\nconst isValidSupabaseUrl = (url) => {\n  if (!url) return false;\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname.includes('supabase.co') || urlObj.hostname.includes('localhost');\n  } catch {\n    return false;\n  }\n};\n\n// Crear cliente de Supabase con validación\nconst createSupabaseClient = () => {\n  const url = supabaseUrl || 'https://placeholder.supabase.co';\n  const key = supabaseAnonKey || 'placeholder-key';\n  \n  if (!isValidSupabaseUrl(supabaseUrl) && process.env.NODE_ENV === 'production') {\n    throw new Error('Invalid Supabase URL in production environment');\n  }\n  \n  return createClient(url, key, {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: true,\n      flowType: 'pkce'\n    },\n    db: {\n      schema: 'public'\n    },\n    global: {\n      headers: {\n        'X-Client-Info': 'todo-por-un-alma-web'\n      }\n    }\n  });\n};\n\nexport const supabase = createSupabaseClient();\n\n// Helpers de autenticación para compatibilidad\nexport const authHelpers = {\n  // Iniciar sesión con email y contraseña\n  signIn: async (email, password) => {\n    return await supabase.auth.signInWithPassword({ email, password });\n  },\n\n  // Obtener usuario actual\n  getCurrentUser: async () => {\n    return await supabase.auth.getUser();\n  },\n\n  // Cerrar sesión\n  signOut: async () => {\n    return await supabase.auth.signOut();\n  },\n\n  // Escuchar cambios de autenticación\n  onAuthStateChange: (callback) => {\n    return supabase.auth.onAuthStateChange(callback);\n  },\n\n\n  // Restablecer contraseña\n  resetPassword: async (email, options = {}) => {\n    return await supabase.auth.resetPasswordForEmail(email, options);\n  }\n};\n\n// Verificar conexión con Supabase\nexport const testConnection = async () => {\n  try {\n    const { error } = await supabase.auth.getSession();\n    if (error) {\n      console.error('Supabase connection error:', error.message);\n      return { success: false, error: error.message };\n    }\n    \n    // Test básico de conectividad a la base de datos\n    const { error: dbError } = await supabase.from('usuarios').select('count', { count: 'exact', head: true });\n    if (dbError) {\n      console.warn('Database connection warning:', dbError.message);\n      return { success: true, warning: 'Auth OK, but database may not be configured' };\n    }\n    \n    console.log('✅ Supabase connection successful');\n    return { success: true };\n  } catch (error) {\n    console.error('Supabase connection failed:', error.message);\n    return { success: false, error: error.message };\n  }\n};\n\n// Verificar estado de la configuración\nexport const getConfigStatus = () => {\n  return {\n    hasUrl: !!supabaseUrl,\n    hasKey: !!supabaseAnonKey,\n    isValidUrl: isValidSupabaseUrl(supabaseUrl),\n    environment: process.env.NODE_ENV,\n    isConfigured: !!(supabaseUrl && supabaseAnonKey && isValidSupabaseUrl(supabaseUrl))\n  };\n};\n\nexport default supabase;\n\nexport const TABLES = {\n  FUNDACION: 'fundacion',\n  SEDES: 'sedes',\n  USUARIOS: 'usuarios',\n  PARTICIPANTES: 'participantes',\n  MENSUALIDADES: 'mensualidades'\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}