{"ast":null,"code":"import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n  }\n  resend(timeout) {\n    this.timeout = timeout;\n    this._cancelRefEvent();\n    this.ref = '';\n    this.refEvent = null;\n    this.receivedResp = null;\n    this.sent = false;\n    this.send();\n  }\n  send() {\n    if (this._hasReceived('timeout')) {\n      return;\n    }\n    this.startTimeout();\n    this.sent = true;\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef()\n    });\n  }\n  updatePayload(payload) {\n    this.payload = Object.assign(Object.assign({}, this.payload), payload);\n  }\n  receive(status, callback) {\n    var _a;\n    if (this._hasReceived(status)) {\n      callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n    }\n    this.recHooks.push({\n      status,\n      callback\n    });\n    return this;\n  }\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return;\n    }\n    this.ref = this.channel.socket._makeRef();\n    this.refEvent = this.channel._replyEventName(this.ref);\n    const callback = payload => {\n      this._cancelRefEvent();\n      this._cancelTimeout();\n      this.receivedResp = payload;\n      this._matchReceive(payload);\n    };\n    this.channel._on(this.refEvent, {}, callback);\n    this.timeoutTimer = setTimeout(() => {\n      this.trigger('timeout', {});\n    }, this.timeout);\n  }\n  trigger(status, response) {\n    if (this.refEvent) this.channel._trigger(this.refEvent, {\n      status,\n      response\n    });\n  }\n  destroy() {\n    this._cancelRefEvent();\n    this._cancelTimeout();\n  }\n  _cancelRefEvent() {\n    if (!this.refEvent) {\n      return;\n    }\n    this.channel._off(this.refEvent, {});\n  }\n  _cancelTimeout() {\n    clearTimeout(this.timeoutTimer);\n    this.timeoutTimer = undefined;\n  }\n  _matchReceive({\n    status,\n    response\n  }) {\n    this.recHooks.filter(h => h.status === status).forEach(h => h.callback(response));\n  }\n  _hasReceived(status) {\n    return this.receivedResp && this.receivedResp.status === status;\n  }\n}","map":{"version":3,"sources":["../../../src/lib/push.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n            join_ref: this.channel._joinRef(),\n        });\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket._makeRef();\n        this.refEvent = this.channel._replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        this.channel._on(this.refEvent, {}, callback);\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel._trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        this.channel._off(this.refEvent, {});\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map"]},"metadata":{},"sourceType":"module"}