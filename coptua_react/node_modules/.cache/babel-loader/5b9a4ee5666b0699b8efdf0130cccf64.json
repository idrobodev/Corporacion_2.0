{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{apiService,ROLES}from\"../../services/apiService\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Make useAuth\nexport const useAuth=()=>useContext(AuthContext);// Provider\nconst AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is logged in on app start - SOLO localStorage\nconst initializeAuth=()=>{setLoading(true);try{console.log('🔄 Inicializando autenticación desde localStorage...');const storedUser=localStorage.getItem('currentUser');const storedToken=localStorage.getItem('authToken');console.log('🔍 Estado localStorage:',{hasUser:!!storedUser,hasToken:!!storedToken,userLength:storedUser===null||storedUser===void 0?void 0:storedUser.length,tokenLength:storedToken===null||storedToken===void 0?void 0:storedToken.length});if(storedUser&&storedToken){try{const user=JSON.parse(storedUser);console.log('👤 Usuario parseado:',user);// Verificar que el usuario tenga los campos mínimos necesarios\nif(user&&user.email&&(user.id||user.userId)){setCurrentUser(user);console.log('✅ Usuario restaurado exitosamente:',user.email);}else{console.warn('⚠️ Usuario incompleto en localStorage:',user);setCurrentUser(null);localStorage.removeItem('authToken');localStorage.removeItem('currentUser');}}catch(parseError){console.error('❌ Error parseando usuario:',parseError);setCurrentUser(null);localStorage.removeItem('authToken');localStorage.removeItem('currentUser');}}else{console.log('❌ No hay datos de sesión en localStorage');setCurrentUser(null);}}catch(error){console.error('❌ Error inicializando auth:',error);setCurrentUser(null);}finally{setLoading(false);console.log('✅ Inicialización de auth completada');}};// Ejecutar sincrónicamente - no async\ninitializeAuth();},[]);// User login using email password\nconst login=async(email,password)=>{try{console.log('🔄 Iniciando login...');const{data,error}=await apiService.login(email,password);if(error){console.error('❌ Error en login:',error);throw error;}console.log('✅ Login exitoso, datos recibidos:',data);// Asegurar que el usuario se guarde en el estado\nsetCurrentUser(data.user);// Verificar que se guardó en localStorage\nconst savedUser=localStorage.getItem('currentUser');const savedToken=localStorage.getItem('authToken');console.log('🔍 Verificación post-login:',{userInState:!!data.user,userInLocalStorage:!!savedUser,tokenInLocalStorage:!!savedToken});return{user:data.user};}catch(error){console.error('❌ Error durante login:',error);throw error;}};// User logout\nconst logout=async()=>{try{console.log('🔄 Cerrando sesión...');// Limpiar estado local primero\nsetCurrentUser(null);localStorage.removeItem('authToken');localStorage.removeItem('currentUser');// Intentar notificar al servidor (opcional)\ntry{await apiService.logout();}catch(logoutError){console.warn('⚠️ Error notificando logout al servidor:',logoutError);// No es crítico si falla\n}console.log('✅ Sesión cerrada correctamente');return{success:true};}catch(error){console.error('❌ Error durante logout:',error);// Asegurar limpieza incluso si hay error\nsetCurrentUser(null);localStorage.removeItem('authToken');localStorage.removeItem('currentUser');throw error;}};// forget Password\nconst forgetPassword=async email=>{const{error}=await apiService.resetPassword(email);if(error)throw error;return{success:true};};// Context values\nconst value={currentUser,logout,login,forgetPassword,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthProvider;","map":null,"metadata":{},"sourceType":"module"}