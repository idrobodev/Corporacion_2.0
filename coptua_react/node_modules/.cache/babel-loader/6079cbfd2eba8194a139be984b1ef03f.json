{"ast":null,"code":"// Servicio API para comunicación con Spring Boot Backend\nimport axios from 'axios';\n\n// Configuración base de la API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\n// Crear instancia de axios con configuración base\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar token de autenticación\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas y errores\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  // Manejar errores de autenticación\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('currentUser');\n    window.location.href = '/login';\n  }\n\n  // Manejar errores de red\n  if (!error.response) {\n    console.error('Error de red:', error.message);\n    return Promise.reject({\n      message: 'Error de conexión con el servidor',\n      status: 0\n    });\n  }\n  return Promise.reject(error.response.data || error);\n});\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n\n  // Iniciar sesión\n  async login(email, password) {\n    try {\n      const response = await apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Guardar token y usuario en localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return {\n        data: {\n          user,\n          token\n        },\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en login:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al iniciar sesión'\n        }\n      };\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n\n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return {\n        success: true,\n        error: null\n      };\n    }\n  }\n\n  // Registrar nuevo usuario\n  async register(userData) {\n    try {\n      const response = await apiClient.post('/auth/register', userData);\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en registro:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al registrar usuario'\n        }\n      };\n    }\n  }\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await apiClient.post('/auth/reset-password', {\n        email\n      });\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al restablecer contraseña'\n        }\n      };\n    }\n  }\n\n  // Obtener usuario actual\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        // Verificar que el token siga siendo válido\n        const response = await apiClient.get('/auth/me');\n        return {\n          data: response.data,\n          error: null\n        };\n      }\n      return {\n        data: null,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      const {\n        data: user\n      } = await this.getCurrentUser();\n      if (!user) return false;\n      const userRole = user.rol || ROLES.CONSULTA;\n\n      // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n      const roleHierarchy = {\n        [ROLES.ADMINISTRADOR]: 2,\n        [ROLES.CONSULTA]: 1\n      };\n      const userLevel = roleHierarchy[userRole] || 1;\n      const requiredLevel = roleHierarchy[requiredRole] || 1;\n      return userLevel >= requiredLevel;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      return false;\n    }\n  }\n\n  // ==================== DASHBOARD ====================\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await apiClient.get('/dashboard/stats');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return {\n        data: {\n          participantes: 0,\n          mensualidades: 0\n        },\n        error\n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n\n  // Obtener participantes\n  async getParticipantes() {\n    try {\n      const response = await apiClient.get('/participantes');\n      return {\n        data: response.data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error al cargar participantes'\n        }\n      };\n    }\n  }\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    try {\n      // Validar datos requeridos\n      if (!participanteData.nombre || !participanteData.email) {\n        return {\n          data: null,\n          error: {\n            message: 'Nombre y email son campos obligatorios'\n          }\n        };\n      }\n      const response = await apiClient.post('/participantes', participanteData);\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creando participante:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al crear participante'\n        }\n      };\n    }\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: {\n            message: 'ID de participante requerido'\n          }\n        };\n      }\n      const response = await apiClient.put(`/participantes/${id}`, participanteData);\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error actualizando participante:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar participante'\n        }\n      };\n    }\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    try {\n      await apiClient.delete(`/participantes/${id}`);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Error eliminando participante:', error);\n      return {\n        error: {\n          message: error.message || 'Error al eliminar participante'\n        }\n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n\n  // Obtener mensualidades\n  async getMensualidades() {\n    try {\n      const response = await apiClient.get('/mensualidades');\n      return {\n        data: response.data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo mensualidades:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error al cargar mensualidades'\n        }\n      };\n    }\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    try {\n      if (!mensualidadData.participante_id || !mensualidadData.valor) {\n        return {\n          data: null,\n          error: {\n            message: 'Participante y valor son campos obligatorios'\n          }\n        };\n      }\n      const response = await apiClient.post('/mensualidades', mensualidadData);\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creando mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al crear mensualidad'\n        }\n      };\n    }\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: {\n            message: 'ID de mensualidad requerido'\n          }\n        };\n      }\n      const response = await apiClient.put(`/mensualidades/${id}`, mensualidadData);\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error actualizando mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar mensualidad'\n        }\n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener sedes\n  async getSedes() {\n    try {\n      const response = await apiClient.get('/sedes');\n      return {\n        data: response.data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error al cargar sedes'\n        }\n      };\n    }\n  }\n\n  // ==================== UTILIDADES ====================\n\n  // Verificar conexión con la API\n  async testConnection() {\n    try {\n      const response = await apiClient.get('/health');\n      console.log('✅ Conexión con API exitosa');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('❌ Error de conexión con API:', error.message);\n      return {\n        success: false,\n        error: error.message || 'Error de conexión'\n      };\n    }\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      baseURL: API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!API_BASE_URL\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const apiService = new ApiService();\nexport default apiService;\n\n// Exportar cliente axios para uso directo si es necesario\nexport { apiClient };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","console","message","data","ROLES","CONSULTA","ADMINISTRADOR","ApiService","login","email","password","post","user","setItem","JSON","stringify","logout","success","register","userData","resetPassword","getCurrentUser","storedUser","parse","get","hasPermission","requiredRole","userRole","rol","roleHierarchy","userLevel","requiredLevel","getDashboardData","participantes","mensualidades","getParticipantes","createParticipante","participanteData","nombre","updateParticipante","id","put","deleteParticipante","delete","getMensualidades","createMensualidad","mensualidadData","participante_id","valor","updateMensualidad","getSedes","testConnection","log","getApiConfig","hasToken","environment","NODE_ENV","isConfigured","apiService"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/services/apiService.js"],"sourcesContent":["// Servicio API para comunicación con Spring Boot Backend\nimport axios from 'axios';\n\n// Configuración base de la API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\n// Crear instancia de axios con configuración base\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para agregar token de autenticación\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar respuestas y errores\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Manejar errores de autenticación\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      window.location.href = '/login';\n    }\n    \n    // Manejar errores de red\n    if (!error.response) {\n      console.error('Error de red:', error.message);\n      return Promise.reject({\n        message: 'Error de conexión con el servidor',\n        status: 0\n      });\n    }\n    \n    return Promise.reject(error.response.data || error);\n  }\n);\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\n\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n  \n  // Iniciar sesión\n  async login(email, password) {\n    try {\n      const response = await apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      \n      const { token, user } = response.data;\n      \n      // Guardar token y usuario en localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      \n      return { data: { user, token }, error: null };\n    } catch (error) {\n      console.error('Error en login:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al iniciar sesión' \n        } \n      };\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n      \n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      \n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return { success: true, error: null };\n    }\n  }\n\n  // Registrar nuevo usuario\n  async register(userData) {\n    try {\n      const response = await apiClient.post('/auth/register', userData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error en registro:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al registrar usuario' \n        } \n      };\n    }\n  }\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await apiClient.post('/auth/reset-password', { email });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al restablecer contraseña' \n        } \n      };\n    }\n  }\n\n  // Obtener usuario actual\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        // Verificar que el token siga siendo válido\n        const response = await apiClient.get('/auth/me');\n        return { data: response.data, error: null };\n      }\n      return { data: null, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return { data: null, error };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      const { data: user } = await this.getCurrentUser();\n      \n      if (!user) return false;\n\n      const userRole = user.rol || ROLES.CONSULTA;\n      \n      // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n      const roleHierarchy = {\n        [ROLES.ADMINISTRADOR]: 2,\n        [ROLES.CONSULTA]: 1\n      };\n\n      const userLevel = roleHierarchy[userRole] || 1;\n      const requiredLevel = roleHierarchy[requiredRole] || 1;\n\n      return userLevel >= requiredLevel;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      return false;\n    }\n  }\n\n  // ==================== DASHBOARD ====================\n  \n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await apiClient.get('/dashboard/stats');\n      return { \n        data: response.data, \n        error: null \n      };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return { \n        data: { participantes: 0, mensualidades: 0 }, \n        error \n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n  \n  // Obtener participantes\n  async getParticipantes() {\n    try {\n      const response = await apiClient.get('/participantes');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return { \n        data: [], \n        error: { message: 'Error al cargar participantes' } \n      };\n    }\n  }\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    try {\n      // Validar datos requeridos\n      if (!participanteData.nombre || !participanteData.email) {\n        return { \n          data: null, \n          error: { message: 'Nombre y email son campos obligatorios' } \n        };\n      }\n\n      const response = await apiClient.post('/participantes', participanteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando participante:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al crear participante' \n        } \n      };\n    }\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    try {\n      if (!id) {\n        return { \n          data: null, \n          error: { message: 'ID de participante requerido' } \n        };\n      }\n\n      const response = await apiClient.put(`/participantes/${id}`, participanteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando participante:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al actualizar participante' \n        } \n      };\n    }\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    try {\n      await apiClient.delete(`/participantes/${id}`);\n      return { error: null };\n    } catch (error) {\n      console.error('Error eliminando participante:', error);\n      return { \n        error: { \n          message: error.message || 'Error al eliminar participante' \n        } \n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n  \n  // Obtener mensualidades\n  async getMensualidades() {\n    try {\n      const response = await apiClient.get('/mensualidades');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo mensualidades:', error);\n      return { \n        data: [], \n        error: { message: 'Error al cargar mensualidades' } \n      };\n    }\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    try {\n      if (!mensualidadData.participante_id || !mensualidadData.valor) {\n        return { \n          data: null, \n          error: { message: 'Participante y valor son campos obligatorios' } \n        };\n      }\n\n      const response = await apiClient.post('/mensualidades', mensualidadData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando mensualidad:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al crear mensualidad' \n        } \n      };\n    }\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    try {\n      if (!id) {\n        return { \n          data: null, \n          error: { message: 'ID de mensualidad requerido' } \n        };\n      }\n\n      const response = await apiClient.put(`/mensualidades/${id}`, mensualidadData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando mensualidad:', error);\n      return { \n        data: null, \n        error: { \n          message: error.message || 'Error al actualizar mensualidad' \n        } \n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n  \n  // Obtener sedes\n  async getSedes() {\n    try {\n      const response = await apiClient.get('/sedes');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return { \n        data: [], \n        error: { message: 'Error al cargar sedes' } \n      };\n    }\n  }\n\n  // ==================== UTILIDADES ====================\n  \n  // Verificar conexión con la API\n  async testConnection() {\n    try {\n      const response = await apiClient.get('/health');\n      console.log('✅ Conexión con API exitosa');\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error('❌ Error de conexión con API:', error.message);\n      return { \n        success: false, \n        error: error.message || 'Error de conexión' \n      };\n    }\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      baseURL: API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!API_BASE_URL\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const apiService = new ApiService();\nexport default apiService;\n\n// Exportar cliente axios para uso directo si es necesario\nexport { apiClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}