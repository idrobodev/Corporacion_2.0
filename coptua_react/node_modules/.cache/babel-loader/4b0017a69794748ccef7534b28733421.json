{"ast":null,"code":"/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  constructor(callback, timerCalc) {\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n  reset() {\n    this.tries = 0;\n    clearTimeout(this.timer);\n    this.timer = undefined;\n  }\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.tries = this.tries + 1;\n      this.callback();\n    }, this.timerCalc(this.tries + 1));\n  }\n}","map":{"version":3,"sources":["../../../src/lib/timer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AACH,eAAc,MAAO,KAAK,CAAA;EAIxB,WAAA,CAAmB,QAAkB,EAAS,SAAmB,EAAA;IAA9C,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAAmB,IAAA,CAAA,SAAS,GAAT,SAAS;IAHvD,IAAA,CAAA,KAAK,GAAuB,SAAS;IACrC,IAAA,CAAA,KAAK,GAAW,CAAC;IAGf,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,SAAS,GAAG,SAAS;EAC5B;EAEA,KAAK,CAAA,EAAA;IACH,IAAI,CAAC,KAAK,GAAG,CAAC;IACd,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;IACxB,IAAI,CAAC,KAAK,GAAG,SAAS;EACxB;EAEA;EACA,eAAe,CAAA,EAAA;IACb,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;IAExB,IAAI,CAAC,KAAK,GAAQ,UAAU,CAAC,MAAK;MAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC;MAC3B,IAAI,CAAC,QAAQ,CAAA,CAAE;IACjB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EACpC;AACD","sourceRoot":"","sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n        this.timer = undefined;\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map"]},"metadata":{},"sourceType":"module"}