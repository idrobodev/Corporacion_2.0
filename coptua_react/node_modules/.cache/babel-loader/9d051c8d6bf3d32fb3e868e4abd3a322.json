{"ast":null,"code":"import{api,ROLES,apiClient}from'./api';import{dbService}from'./database';class StorageService{async isAdmin(){return await dbService.hasPermission(ROLES.ADMINISTRADOR);}async upload(file){let path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}if(file.size>10*1024*1024){throw new Error('File size exceeds 10MB limit');}try{const formData=new FormData();formData.append('file',file);formData.append('path',path||'');const response=await apiClient.post('/files/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});return{path:response.data.path,publicUrl:response.data.url};}catch(error){var _error$response,_error$response$data;console.error('Error uploading file:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Error al subir archivo');}}async deleteFile(fullPath){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{await apiClient.delete(\"/files/\".concat(encodeURIComponent(fullPath)));}catch(error){var _error$response2,_error$response2$data;console.error('Error deleting file:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Error al eliminar archivo');}}async listFiles(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';try{const response=await apiClient.get('/files',{params:{path:path||''}});return{files:response.data.files||[],folders:response.data.folders||[]};}catch(error){var _error$response3,_error$response3$data;console.error('Error listing files:',error);throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Error al listar archivos');}}async deleteFolder(path){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{await apiClient.delete(\"/files/folder/\".concat(encodeURIComponent(path)));}catch(error){var _error$response4,_error$response4$data;console.error('Error deleting folder:',error);throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Error al eliminar carpeta');}}async createFolder(folderName){let parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{const response=await apiClient.post('/files/folder',{name:folderName,parentPath:parentPath||''});return response.data;}catch(error){var _error$response5,_error$response5$data;console.error('Error creating folder:',error);throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Error al crear carpeta');}}async renameFolder(oldName,newName){let parentPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{await apiClient.put('/files/folder/rename',{oldName,newName,parentPath:parentPath||''});}catch(error){var _error$response6,_error$response6$data;console.error('Error renaming folder:',error);throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Error al renombrar carpeta');}}async getDownloadUrl(path){try{const response=await apiClient.get(\"/files/download-url/\".concat(encodeURIComponent(path)));return response.data.url;}catch(error){var _error$response7,_error$response7$data;console.error('Error getting download URL:',error);throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Error al obtener URL de descarga');}}}export const storage=new StorageService();export default storage;","map":null,"metadata":{},"sourceType":"module"}