{"ast":null,"code":"import { apiService, ROLES, apiClient } from './apiService';\nimport { dbService } from './databaseService';\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('path', path || '');\n      const response = await apiClient.post('/files/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return {\n        path: response.data.path,\n        publicUrl: response.data.url\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al subir archivo');\n    }\n  }\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    try {\n      await apiClient.delete(`/files/${encodeURIComponent(fullPath)}`);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error deleting file:', error);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al eliminar archivo');\n    }\n  }\n  async listFiles(path = '') {\n    try {\n      const response = await apiClient.get('/files', {\n        params: {\n          path: path || ''\n        }\n      });\n      return {\n        files: response.data.files || [],\n        folders: response.data.folders || []\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error listing files:', error);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error al listar archivos');\n    }\n  }\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    try {\n      await apiClient.delete(`/files/folder/${encodeURIComponent(path)}`);\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error deleting folder:', error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error al eliminar carpeta');\n    }\n  }\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    try {\n      const response = await apiClient.post('/files/folder', {\n        name: folderName,\n        parentPath: parentPath || ''\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error creating folder:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error al crear carpeta');\n    }\n  }\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    try {\n      await apiClient.put('/files/folder/rename', {\n        oldName,\n        newName,\n        parentPath: parentPath || ''\n      });\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error renaming folder:', error);\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error al renombrar carpeta');\n    }\n  }\n  async getDownloadUrl(path) {\n    try {\n      const response = await apiClient.get(`/files/download-url/${encodeURIComponent(path)}`);\n      return response.data.url;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error getting download URL:', error);\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Error al obtener URL de descarga');\n    }\n  }\n}\nexport const storageService = new StorageService();\nexport default storageService;","map":{"version":3,"names":["apiService","ROLES","apiClient","dbService","StorageService","isAdmin","hasPermission","ADMINISTRADOR","upload","file","path","Error","size","formData","FormData","append","response","post","headers","data","publicUrl","url","error","_error$response","_error$response$data","console","message","deleteFile","fullPath","delete","encodeURIComponent","_error$response2","_error$response2$data","listFiles","get","params","files","folders","_error$response3","_error$response3$data","deleteFolder","_error$response4","_error$response4$data","createFolder","folderName","parentPath","name","_error$response5","_error$response5$data","renameFolder","oldName","newName","put","_error$response6","_error$response6$data","getDownloadUrl","_error$response7","_error$response7$data","storageService"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/services/storageService.js"],"sourcesContent":["import { apiService, ROLES, apiClient } from './apiService';\nimport { dbService } from './databaseService';\n\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('path', path || '');\n\n      const response = await apiClient.post('/files/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return {\n        path: response.data.path,\n        publicUrl: response.data.url\n      };\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw new Error(error.response?.data?.message || 'Error al subir archivo');\n    }\n  }\n\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      await apiClient.delete(`/files/${encodeURIComponent(fullPath)}`);\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      throw new Error(error.response?.data?.message || 'Error al eliminar archivo');\n    }\n  }\n\n  async listFiles(path = '') {\n    try {\n      const response = await apiClient.get('/files', {\n        params: { path: path || '' }\n      });\n\n      return {\n        files: response.data.files || [],\n        folders: response.data.folders || []\n      };\n    } catch (error) {\n      console.error('Error listing files:', error);\n      throw new Error(error.response?.data?.message || 'Error al listar archivos');\n    }\n  }\n\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      await apiClient.delete(`/files/folder/${encodeURIComponent(path)}`);\n    } catch (error) {\n      console.error('Error deleting folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al eliminar carpeta');\n    }\n  }\n\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      const response = await apiClient.post('/files/folder', {\n        name: folderName,\n        parentPath: parentPath || ''\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al crear carpeta');\n    }\n  }\n\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      await apiClient.put('/files/folder/rename', {\n        oldName,\n        newName,\n        parentPath: parentPath || ''\n      });\n    } catch (error) {\n      console.error('Error renaming folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al renombrar carpeta');\n    }\n  }\n\n  async getDownloadUrl(path) {\n    try {\n      const response = await apiClient.get(`/files/download-url/${encodeURIComponent(path)}`);\n      return response.data.url;\n    } catch (error) {\n      console.error('Error getting download URL:', error);\n      throw new Error(error.response?.data?.message || 'Error al obtener URL de descarga');\n    }\n  }\n}\n\nexport const storageService = new StorageService();\nexport default storageService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}