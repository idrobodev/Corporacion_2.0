{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.enabled = false;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel._on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel._joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel._on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences\n      });\n    });\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences\n      });\n    });\n    this.onSync(() => {\n      this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(m => m.presence_ref);\n        const curPresenceRefs = currentPresences.map(m => m.presence_ref);\n        const joinedPresences = newPresences.filter(m => curPresenceRefs.indexOf(m.presence_ref) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceRefs.indexOf(m.presence_ref) < 0);\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n    this.map(joins, (key, newPresences) => {\n      var _a;\n      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n      state[key] = this.cloneDeep(newPresences);\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(m => m.presence_ref);\n        const curPresences = currentPresences.filter(m => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n        state[key].unshift(...curPresences);\n      }\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceRefsToRemove = leftPresences.map(m => m.presence_ref);\n      currentPresences = currentPresences.filter(m => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /** @internal */\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_ref'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n      return newState;\n    }, {});\n  }\n  /** @internal */\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  /** @internal */\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n  /** @internal */\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n  /** @internal */\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n  /** @internal */\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef();\n  }\n}","map":{"version":3,"sources":["../../src/RealtimePresence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.enabled = false;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map"]},"metadata":{},"sourceType":"module"}