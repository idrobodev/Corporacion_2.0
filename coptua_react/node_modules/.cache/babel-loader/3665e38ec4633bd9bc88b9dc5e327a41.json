{"ast":null,"code":"var _jsxFileName = \"/Users/todoporunalma/Desktop/coptua_react/src/components/Context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { apiService, ROLES } from \"../../services/apiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Make useAuth\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check active session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setCurrentUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setLoading(true);\n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        const user = session === null || session === void 0 ? void 0 : session.user;\n        if (user) {\n          // Fetch user role from DB\n          const {\n            data: dbUser\n          } = await dbService.getCurrentUser();\n          setCurrentUser({\n            ...user,\n            rol: (dbUser === null || dbUser === void 0 ? void 0 : dbUser.rol) || ROLES.CONSULTA\n          });\n        } else {\n          setCurrentUser(null);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // User login using email password\n  const login = async (email, password) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) throw error;\n\n    // Fetch user role\n    const {\n      data: dbUser\n    } = await dbService.getCurrentUser();\n    const userWithRole = {\n      ...data.user,\n      rol: (dbUser === null || dbUser === void 0 ? void 0 : dbUser.rol) || ROLES.CONSULTA\n    };\n    setCurrentUser(userWithRole);\n    return {\n      user: userWithRole\n    };\n  };\n\n  // User logout\n  const logout = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) throw error;\n    setCurrentUser(null);\n    return {\n      success: true\n    };\n  };\n\n  // forget Password\n  const forgetPassword = async email => {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: window.location.origin + '/reset-password'\n    });\n    if (error) throw error;\n    return {\n      success: true\n    };\n  };\n\n  // Context values\n  const value = {\n    currentUser,\n    logout,\n    login,\n    forgetPassword,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","apiService","ROLES","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","supabase","auth","getSession","then","data","session","_session$user","user","subscription","onAuthStateChange","event","dbUser","dbService","getCurrentUser","rol","CONSULTA","unsubscribe","login","email","password","error","signInWithPassword","userWithRole","logout","signOut","success","forgetPassword","resetPasswordForEmail","redirectTo","window","location","origin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/components/Context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { apiService, ROLES } from \"../../services/apiService\";\nconst AuthContext = createContext();\n\n// Make useAuth\nexport const useAuth = () => useContext(AuthContext);\n\n// Provider\n\nconst AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check active session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setCurrentUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setLoading(true);\n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        const user = session?.user;\n        if (user) {\n          // Fetch user role from DB\n          const { data: dbUser } = await dbService.getCurrentUser();\n          setCurrentUser({ ...user, rol: dbUser?.rol || ROLES.CONSULTA });\n        } else {\n          setCurrentUser(null);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        setCurrentUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n\n  // User login using email password\n  const login = async (email, password) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) throw error;\n\n    // Fetch user role\n    const { data: dbUser } = await dbService.getCurrentUser();\n    const userWithRole = { ...data.user, rol: dbUser?.rol || ROLES.CONSULTA };\n    setCurrentUser(userWithRole);\n    return { user: userWithRole };\n  };\n\n  // User logout\n  const logout = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    setCurrentUser(null);\n    return { success: true };\n  };\n\n\n  // forget Password\n  const forgetPassword = async (email) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: window.location.origin + '/reset-password',\n    });\n    if (error) throw error;\n    return { success: true };\n  };\n\n\n  // Context values\n  const value = {\n    currentUser,\n    logout,\n    login,\n    forgetPassword,\n    loading,\n  };\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}