{"ast":null,"code":"export class WebSocketFactory {\n  static detectEnvironment() {\n    var _a;\n    if (typeof WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: globalThis.WebSocket\n      };\n    }\n    if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: global.WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocketPair !== 'undefined' && typeof globalThis.WebSocket === 'undefined') {\n      return {\n        type: 'cloudflare',\n        error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.'\n      };\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.EdgeRuntime || typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge'))) {\n      return {\n        type: 'unsupported',\n        error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.'\n      };\n    }\n    if (typeof process !== 'undefined') {\n      // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n      const processVersions = process['versions'];\n      if (processVersions && processVersions['node']) {\n        // Remove 'v' prefix if present and parse the major version\n        const versionString = processVersions['node'];\n        const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0]);\n        // Node.js 22+ should have native WebSocket\n        if (nodeVersion >= 22) {\n          // Check if native WebSocket is available (should be in Node.js 22+)\n          if (typeof globalThis.WebSocket !== 'undefined') {\n            return {\n              type: 'native',\n              constructor: globalThis.WebSocket\n            };\n          }\n          // If not available, user needs to provide it\n          return {\n            type: 'unsupported',\n            error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n            workaround: 'Provide a WebSocket implementation via the transport option.'\n          };\n        }\n        // Node.js < 22 doesn't have native WebSocket\n        return {\n          type: 'unsupported',\n          error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n          workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' + 'import ws from \"ws\"\\n' + 'new RealtimeClient(url, { transport: ws })'\n        };\n      }\n    }\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\"\n    };\n  }\n  static getWebSocketConstructor() {\n    const env = this.detectEnvironment();\n    if (env.constructor) {\n      return env.constructor;\n    }\n    let errorMessage = env.error || 'WebSocket not supported in this environment.';\n    if (env.workaround) {\n      errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\n    }\n    throw new Error(errorMessage);\n  }\n  static createWebSocket(url, protocols) {\n    const WS = this.getWebSocketConstructor();\n    return new WS(url, protocols);\n  }\n  static isWebSocketSupported() {\n    try {\n      const env = this.detectEnvironment();\n      return env.type === 'native' || env.type === 'ws';\n    } catch (_a) {\n      return false;\n    }\n  }\n}\nexport default WebSocketFactory;","map":{"version":3,"sources":["../../../src/lib/websocket-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export class WebSocketFactory {\n    static detectEnvironment() {\n        var _a;\n        if (typeof WebSocket !== 'undefined') {\n            return { type: 'native', constructor: WebSocket };\n        }\n        if (typeof globalThis !== 'undefined' &&\n            typeof globalThis.WebSocket !== 'undefined') {\n            return { type: 'native', constructor: globalThis.WebSocket };\n        }\n        if (typeof global !== 'undefined' &&\n            typeof global.WebSocket !== 'undefined') {\n            return { type: 'native', constructor: global.WebSocket };\n        }\n        if (typeof globalThis !== 'undefined' &&\n            typeof globalThis.WebSocketPair !== 'undefined' &&\n            typeof globalThis.WebSocket === 'undefined') {\n            return {\n                type: 'cloudflare',\n                error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n                workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.',\n            };\n        }\n        if ((typeof globalThis !== 'undefined' && globalThis.EdgeRuntime) ||\n            (typeof navigator !== 'undefined' &&\n                ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge')))) {\n            return {\n                type: 'unsupported',\n                error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n                workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.',\n            };\n        }\n        if (typeof process !== 'undefined') {\n            // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n            const processVersions = process['versions'];\n            if (processVersions && processVersions['node']) {\n                // Remove 'v' prefix if present and parse the major version\n                const versionString = processVersions['node'];\n                const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0]);\n                // Node.js 22+ should have native WebSocket\n                if (nodeVersion >= 22) {\n                    // Check if native WebSocket is available (should be in Node.js 22+)\n                    if (typeof globalThis.WebSocket !== 'undefined') {\n                        return { type: 'native', constructor: globalThis.WebSocket };\n                    }\n                    // If not available, user needs to provide it\n                    return {\n                        type: 'unsupported',\n                        error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n                        workaround: 'Provide a WebSocket implementation via the transport option.',\n                    };\n                }\n                // Node.js < 22 doesn't have native WebSocket\n                return {\n                    type: 'unsupported',\n                    error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n                    workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' +\n                        'import ws from \"ws\"\\n' +\n                        'new RealtimeClient(url, { transport: ws })',\n                };\n            }\n        }\n        return {\n            type: 'unsupported',\n            error: 'Unknown JavaScript runtime without WebSocket support.',\n            workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\",\n        };\n    }\n    static getWebSocketConstructor() {\n        const env = this.detectEnvironment();\n        if (env.constructor) {\n            return env.constructor;\n        }\n        let errorMessage = env.error || 'WebSocket not supported in this environment.';\n        if (env.workaround) {\n            errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\n        }\n        throw new Error(errorMessage);\n    }\n    static createWebSocket(url, protocols) {\n        const WS = this.getWebSocketConstructor();\n        return new WS(url, protocols);\n    }\n    static isWebSocketSupported() {\n        try {\n            const env = this.detectEnvironment();\n            return env.type === 'native' || env.type === 'ws';\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\nexport default WebSocketFactory;\n//# sourceMappingURL=websocket-factory.js.map"]},"metadata":{},"sourceType":"module"}