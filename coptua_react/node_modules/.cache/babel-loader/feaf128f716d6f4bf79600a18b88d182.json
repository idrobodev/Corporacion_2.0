{"ast":null,"code":"import { supabase } from '../supabase/supabaseClient';\nimport { dbService, ROLES } from './databaseService';\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n    const fullPath = path ? `${path}/${file.name}` : file.name;\n    const {\n      error\n    } = await supabase.storage.from('documents').upload(fullPath, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n    if (error) throw error;\n\n    // Obtener URL pública y registrar metadatos en tabla 'archivos'\n    const {\n      data: urlData\n    } = await supabase.storage.from('documents').getPublicUrl(fullPath);\n    const publicUrl = (urlData === null || urlData === void 0 ? void 0 : urlData.publicUrl) || null;\n\n    // Crear registro en tabla 'archivos' si existe\n    try {\n      await supabase.from('archivos').insert({\n        nombre: file.name,\n        ruta: fullPath,\n        url: publicUrl,\n        mime_type: file.type || null,\n        tamaño: file.size || null,\n        carpeta: path || null,\n        created_at: new Date().toISOString()\n      });\n    } catch (e) {\n      console.warn('Tabla \"archivos\" no existe o inserción falló. Continúa sin registrar metadatos.', e === null || e === void 0 ? void 0 : e.message);\n    }\n    return {\n      path: fullPath,\n      publicUrl\n    };\n  }\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    const {\n      error\n    } = await supabase.storage.from('documents').remove([fullPath]);\n    if (error) throw error;\n\n    // Eliminar metadatos en tabla 'archivos' si existe\n    try {\n      await supabase.from('archivos').delete().eq('ruta', fullPath);\n    } catch (e) {\n      console.warn('No se pudo eliminar metadatos de tabla \"archivos\" (puede no existir):', e === null || e === void 0 ? void 0 : e.message);\n    }\n  }\n  async listFiles(path = '') {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('documents').list(path, {\n      limit: 100,\n      sortBy: {\n        column: 'name',\n        order: 'asc'\n      }\n    });\n    if (error) throw error;\n\n    // Filter files and folders (folders end with /)\n    let files = data.filter(item => !item.name.endsWith('/'));\n    const folders = data.filter(item => item.name.endsWith('/')).map(item => item.name.slice(0, -1)); // Remove trailing /\n\n    // Filter out placeholder files\n    files = files.filter(item => item.name !== '_placeholder');\n    return {\n      files,\n      folders\n    };\n  }\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Get all contents recursively\n    const {\n      data: items,\n      error: listError\n    } = await supabase.storage.from('documents').list(path, {\n      recursive: true\n    });\n    if (listError) throw listError;\n    if (items.length === 0) return; // Empty folder\n\n    // Build full paths to delete\n    const pathsToDelete = items.map(item => `${path}/${item.name}`);\n    const {\n      error\n    } = await supabase.storage.from('documents').remove(pathsToDelete);\n    if (error) throw error;\n  }\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    const fullPath = parentPath ? `${parentPath}/${folderName}` : folderName;\n    // Create folder by uploading a hidden placeholder file\n    const emptyBlob = new Blob([''], {\n      type: 'application/json'\n    });\n    const {\n      data,\n      error\n    } = await supabase.storage.from('documents').upload(`${fullPath}/_placeholder`, emptyBlob);\n    if (error) throw error;\n    return data;\n  }\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n    const oldPath = parentPath ? `${parentPath}/${oldName}` : oldName;\n    const newPath = parentPath ? `${parentPath}/${newName}` : newName;\n\n    // List contents recursively\n    const {\n      data: items,\n      error: listError\n    } = await supabase.storage.from('documents').list(oldPath, {\n      recursive: true\n    });\n    if (listError) throw listError;\n\n    // Move each item\n    for (const item of items) {\n      const oldFullPath = `${oldPath}/${item.name}`;\n      const newFullPath = oldFullPath.replace(oldPath, newPath);\n      const {\n        error: moveError\n      } = await supabase.storage.from('documents').move(oldFullPath, newFullPath);\n      if (moveError) {\n        // Rollback on error (simplified; in production, use transactions)\n        console.error('Rename failed for item:', item.name, moveError);\n        throw moveError;\n      }\n    }\n\n    // Delete placeholder if exists\n    await this.deleteFile(`${oldPath}/_placeholder`).catch(() => {}); // Ignore if not exists\n  }\n  async getDownloadUrl(path) {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('documents').getPublicUrl(path);\n    if (error) throw error;\n    return data.publicUrl;\n  }\n}\nexport const storageService = new StorageService();\nexport default storageService;","map":{"version":3,"names":["supabase","dbService","ROLES","StorageService","isAdmin","hasPermission","ADMINISTRADOR","upload","file","path","Error","size","fullPath","name","error","storage","from","cacheControl","upsert","data","urlData","getPublicUrl","publicUrl","insert","nombre","ruta","url","mime_type","type","tamaño","carpeta","created_at","Date","toISOString","e","console","warn","message","deleteFile","remove","delete","eq","listFiles","list","limit","sortBy","column","order","files","filter","item","endsWith","folders","map","slice","deleteFolder","items","listError","recursive","length","pathsToDelete","createFolder","folderName","parentPath","emptyBlob","Blob","renameFolder","oldName","newName","oldPath","newPath","oldFullPath","newFullPath","replace","moveError","move","catch","getDownloadUrl","storageService"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/services/storageService.js"],"sourcesContent":["import { supabase } from '../supabase/supabaseClient';\nimport { dbService, ROLES } from './databaseService';\n\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n\n    const fullPath = path ? `${path}/${file.name}` : file.name;\n    const { error } = await supabase.storage\n      .from('documents')\n      .upload(fullPath, file, {\n        cacheControl: '3600',\n        upsert: false\n      });\n\n    if (error) throw error;\n\n    // Obtener URL pública y registrar metadatos en tabla 'archivos'\n    const { data: urlData } = await supabase.storage\n      .from('documents')\n      .getPublicUrl(fullPath);\n\n    const publicUrl = urlData?.publicUrl || null;\n\n    // Crear registro en tabla 'archivos' si existe\n    try {\n      await supabase.from('archivos').insert({\n        nombre: file.name,\n        ruta: fullPath,\n        url: publicUrl,\n        mime_type: file.type || null,\n        tamaño: file.size || null,\n        carpeta: path || null,\n        created_at: new Date().toISOString()\n      });\n    } catch (e) {\n      console.warn('Tabla \"archivos\" no existe o inserción falló. Continúa sin registrar metadatos.', e?.message);\n    }\n\n    return { path: fullPath, publicUrl };\n  }\n\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    const { error } = await supabase.storage\n      .from('documents')\n      .remove([fullPath]);\n\n    if (error) throw error;\n\n    // Eliminar metadatos en tabla 'archivos' si existe\n    try {\n      await supabase.from('archivos').delete().eq('ruta', fullPath);\n    } catch (e) {\n      console.warn('No se pudo eliminar metadatos de tabla \"archivos\" (puede no existir):', e?.message);\n    }\n  }\n\n  async listFiles(path = '') {\n    const { data, error } = await supabase.storage\n      .from('documents')\n      .list(path, { limit: 100, sortBy: { column: 'name', order: 'asc' } });\n\n    if (error) throw error;\n\n    // Filter files and folders (folders end with /)\n    let files = data.filter(item => !item.name.endsWith('/'));\n    const folders = data\n      .filter(item => item.name.endsWith('/'))\n      .map(item => item.name.slice(0, -1)); // Remove trailing /\n  \n    // Filter out placeholder files\n    files = files.filter(item => item.name !== '_placeholder');\n\n    return { files, folders };\n  }\n\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Get all contents recursively\n    const { data: items, error: listError } = await supabase.storage\n      .from('documents')\n      .list(path, { recursive: true });\n\n    if (listError) throw listError;\n\n    if (items.length === 0) return; // Empty folder\n\n    // Build full paths to delete\n    const pathsToDelete = items.map(item => `${path}/${item.name}`);\n\n    const { error } = await supabase.storage\n      .from('documents')\n      .remove(pathsToDelete);\n\n    if (error) throw error;\n  }\n\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    const fullPath = parentPath ? `${parentPath}/${folderName}` : folderName;\n    // Create folder by uploading a hidden placeholder file\n    const emptyBlob = new Blob([''], { type: 'application/json' });\n    const { data, error } = await supabase.storage\n      .from('documents')\n      .upload(`${fullPath}/_placeholder`, emptyBlob);\n\n    if (error) throw error;\n    return data;\n  }\n\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    const oldPath = parentPath ? `${parentPath}/${oldName}` : oldName;\n    const newPath = parentPath ? `${parentPath}/${newName}` : newName;\n\n    // List contents recursively\n    const { data: items, error: listError } = await supabase.storage\n      .from('documents')\n      .list(oldPath, { recursive: true });\n\n    if (listError) throw listError;\n\n    // Move each item\n    for (const item of items) {\n      const oldFullPath = `${oldPath}/${item.name}`;\n      const newFullPath = oldFullPath.replace(oldPath, newPath);\n\n      const { error: moveError } = await supabase.storage\n        .from('documents')\n        .move(oldFullPath, newFullPath);\n\n      if (moveError) {\n        // Rollback on error (simplified; in production, use transactions)\n        console.error('Rename failed for item:', item.name, moveError);\n        throw moveError;\n      }\n    }\n\n    // Delete placeholder if exists\n    await this.deleteFile(`${oldPath}/_placeholder`).catch(() => {}); // Ignore if not exists\n  }\n\n  async getDownloadUrl(path) {\n    const { data, error } = await supabase.storage\n      .from('documents')\n      .getPublicUrl(path);\n\n    if (error) throw error;\n    return data.publicUrl;\n  }\n}\n\nexport const storageService = new StorageService();\nexport default storageService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}