{"ast":null,"code":"import { apiService, ROLES } from './apiService';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await apiService.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      const {\n        data: user\n      } = await this.getCurrentUser();\n      if (!user) return false;\n      const userRole = user.rol || ROLES.CONSULTA;\n\n      // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n      const roleHierarchy = {\n        [ROLES.ADMINISTRADOR]: 2,\n        [ROLES.CONSULTA]: 1\n      };\n      const userLevel = roleHierarchy[userRole] || 1;\n      const requiredLevel = roleHierarchy[requiredRole] || 1;\n      return userLevel >= requiredLevel;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const [participantesRes, mensualidadesRes] = await Promise.all([supabase.from('participantes').select('*', {\n        count: 'exact'\n      }), supabase.from('mensualidades').select('*', {\n        count: 'exact'\n      })]);\n      return {\n        participantes: participantesRes.count || 0,\n        mensualidades: mensualidadesRes.count || 0,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      return {\n        error\n      };\n    }\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('participantes').select(`\n          *,\n          sedes (\n            nombre,\n            direccion\n          )\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Database error in getParticipantes:', error);\n        return {\n          data: [],\n          error\n        };\n      }\n      return {\n        data: data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching participantes:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('mensualidades').select(`\n          *,\n          participantes (\n            nombre,\n            apellido\n          )\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Database error in getMensualidades:', error);\n        return {\n          data: [],\n          error\n        };\n      }\n      return {\n        data: data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching mensualidades:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    try {\n      // Validar datos requeridos\n      if (!participanteData.nombre || !participanteData.email) {\n        return {\n          data: null,\n          error: {\n            message: 'Nombre y email son campos obligatorios'\n          }\n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = {\n        ...participanteData,\n        nombre: participanteData.nombre.trim(),\n        email: participanteData.email.toLowerCase().trim(),\n        created_at: new Date().toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('participantes').insert([sanitizedData]).select().single();\n      if (error) {\n        console.error('Database error in createParticipante:', error);\n        return {\n          data: null,\n          error\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating participante:', error);\n      return {\n        data: null,\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    try {\n      // Validar ID\n      if (!id || isNaN(id)) {\n        return {\n          data: null,\n          error: {\n            message: 'ID de participante inválido'\n          }\n        };\n      }\n\n      // Sanitizar datos de actualización\n      const sanitizedData = {\n        ...participanteData\n      };\n      if (sanitizedData.nombre) {\n        sanitizedData.nombre = sanitizedData.nombre.trim();\n      }\n      if (sanitizedData.email) {\n        sanitizedData.email = sanitizedData.email.toLowerCase().trim();\n      }\n      sanitizedData.updated_at = new Date().toISOString();\n      const {\n        data,\n        error\n      } = await supabase.from('participantes').update(sanitizedData).eq('id', id).select().single();\n      if (error) {\n        console.error('Database error in updateParticipante:', error);\n        return {\n          data: null,\n          error\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating participante:', error);\n      return {\n        data: null,\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    try {\n      const {\n        error\n      } = await supabase.from('participantes').delete().eq('id', id);\n      return {\n        error\n      };\n    } catch (error) {\n      console.error('Error deleting participante:', error);\n      return {\n        error\n      };\n    }\n  }\n\n  // Obtener sedes\n  async getSedes() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('sedes').select('*').order('nombre');\n      if (error) {\n        console.error('Database error in getSedes:', error);\n        return {\n          data: [],\n          error\n        };\n      }\n      return {\n        data: data || [],\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching sedes:', error);\n      return {\n        data: [],\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    try {\n      // Validar datos requeridos\n      if (!mensualidadData.participante_id || !mensualidadData.valor) {\n        return {\n          data: null,\n          error: {\n            message: 'Participante y valor son campos obligatorios'\n          }\n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = {\n        ...mensualidadData,\n        valor: parseFloat(mensualidadData.valor),\n        created_at: new Date().toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('mensualidades').insert([sanitizedData]).select().single();\n      if (error) {\n        console.error('Database error in createMensualidad:', error);\n        return {\n          data: null,\n          error\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error creating mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    try {\n      // Validar ID\n      if (!id || isNaN(id)) {\n        return {\n          data: null,\n          error: {\n            message: 'ID de mensualidad inválido'\n          }\n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = {\n        ...mensualidadData\n      };\n      if (sanitizedData.valor) {\n        sanitizedData.valor = parseFloat(sanitizedData.valor);\n      }\n      sanitizedData.updated_at = new Date().toISOString();\n      const {\n        data,\n        error\n      } = await supabase.from('mensualidades').update(sanitizedData).eq('id', id).select().single();\n      if (error) {\n        console.error('Database error in updateMensualidad:', error);\n        return {\n          data: null,\n          error\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error updating mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: 'Error interno del servidor'\n        }\n      };\n    }\n  }\n\n  // Validar estructura de base de datos\n  async validateDatabaseStructure() {\n    const requiredTables = ['usuarios', 'participantes', 'mensualidades', 'sedes', 'fundacion'];\n    const results = {};\n    for (const table of requiredTables) {\n      try {\n        const {\n          error\n        } = await supabase.from(table).select('*', {\n          count: 'exact',\n          head: true\n        });\n        results[table] = error ? {\n          status: 'error',\n          message: error.message\n        } : {\n          status: 'ok'\n        };\n      } catch (err) {\n        results[table] = {\n          status: 'error',\n          message: err.message\n        };\n      }\n    }\n    return results;\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;","map":{"version":3,"names":["apiService","ROLES","DatabaseService","getCurrentUser","hasPermission","requiredRole","data","user","userRole","rol","CONSULTA","roleHierarchy","ADMINISTRADOR","userLevel","requiredLevel","error","console","getDashboardData","participantesRes","mensualidadesRes","Promise","all","supabase","from","select","count","participantes","mensualidades","getParticipantes","order","ascending","message","getMensualidades","createParticipante","participanteData","nombre","email","sanitizedData","trim","toLowerCase","created_at","Date","toISOString","insert","single","updateParticipante","id","isNaN","updated_at","update","eq","deleteParticipante","delete","getSedes","createMensualidad","mensualidadData","participante_id","valor","parseFloat","updateMensualidad","validateDatabaseStructure","requiredTables","results","table","head","status","err","dbService"],"sources":["/Users/todoporunalma/Desktop/coptua_react/src/services/databaseService.js"],"sourcesContent":["import { apiService, ROLES } from './apiService';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\n\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await apiService.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      const { data: user } = await this.getCurrentUser();\n      \n      if (!user) return false;\n\n      const userRole = user.rol || ROLES.CONSULTA;\n      \n      // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n      const roleHierarchy = {\n        [ROLES.ADMINISTRADOR]: 2,\n        [ROLES.CONSULTA]: 1\n      };\n\n      const userLevel = roleHierarchy[userRole] || 1;\n      const requiredLevel = roleHierarchy[requiredRole] || 1;\n\n      return userLevel >= requiredLevel;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const [participantesRes, mensualidadesRes] = await Promise.all([\n        supabase.from('participantes').select('*', { count: 'exact' }),\n        supabase.from('mensualidades').select('*', { count: 'exact' })\n      ]);\n\n      return {\n        participantes: participantesRes.count || 0,\n        mensualidades: mensualidadesRes.count || 0,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      return { error };\n    }\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    try {\n      const { data, error } = await supabase\n        .from('participantes')\n        .select(`\n          *,\n          sedes (\n            nombre,\n            direccion\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Database error in getParticipantes:', error);\n        return { data: [], error };\n      }\n\n      return { data: data || [], error: null };\n    } catch (error) {\n      console.error('Error fetching participantes:', error);\n      return { data: [], error: { message: 'Error interno del servidor' } };\n    }\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    try {\n      const { data, error } = await supabase\n        .from('mensualidades')\n        .select(`\n          *,\n          participantes (\n            nombre,\n            apellido\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Database error in getMensualidades:', error);\n        return { data: [], error };\n      }\n\n      return { data: data || [], error: null };\n    } catch (error) {\n      console.error('Error fetching mensualidades:', error);\n      return { data: [], error: { message: 'Error interno del servidor' } };\n    }\n  }\n\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    try {\n      // Validar datos requeridos\n      if (!participanteData.nombre || !participanteData.email) {\n        return { \n          data: null, \n          error: { message: 'Nombre y email son campos obligatorios' } \n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = {\n        ...participanteData,\n        nombre: participanteData.nombre.trim(),\n        email: participanteData.email.toLowerCase().trim(),\n        created_at: new Date().toISOString()\n      };\n\n      const { data, error } = await supabase\n        .from('participantes')\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Database error in createParticipante:', error);\n        return { data: null, error };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error('Error creating participante:', error);\n      return { \n        data: null, \n        error: { message: 'Error interno del servidor' } \n      };\n    }\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    try {\n      // Validar ID\n      if (!id || isNaN(id)) {\n        return { \n          data: null, \n          error: { message: 'ID de participante inválido' } \n        };\n      }\n\n      // Sanitizar datos de actualización\n      const sanitizedData = { ...participanteData };\n      if (sanitizedData.nombre) {\n        sanitizedData.nombre = sanitizedData.nombre.trim();\n      }\n      if (sanitizedData.email) {\n        sanitizedData.email = sanitizedData.email.toLowerCase().trim();\n      }\n      sanitizedData.updated_at = new Date().toISOString();\n\n      const { data, error } = await supabase\n        .from('participantes')\n        .update(sanitizedData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Database error in updateParticipante:', error);\n        return { data: null, error };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error('Error updating participante:', error);\n      return { \n        data: null, \n        error: { message: 'Error interno del servidor' } \n      };\n    }\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    try {\n      const { error } = await supabase\n        .from('participantes')\n        .delete()\n        .eq('id', id);\n\n      return { error };\n    } catch (error) {\n      console.error('Error deleting participante:', error);\n      return { error };\n    }\n  }\n\n  // Obtener sedes\n  async getSedes() {\n    try {\n      const { data, error } = await supabase\n        .from('sedes')\n        .select('*')\n        .order('nombre');\n\n      if (error) {\n        console.error('Database error in getSedes:', error);\n        return { data: [], error };\n      }\n\n      return { data: data || [], error: null };\n    } catch (error) {\n      console.error('Error fetching sedes:', error);\n      return { data: [], error: { message: 'Error interno del servidor' } };\n    }\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    try {\n      // Validar datos requeridos\n      if (!mensualidadData.participante_id || !mensualidadData.valor) {\n        return { \n          data: null, \n          error: { message: 'Participante y valor son campos obligatorios' } \n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = {\n        ...mensualidadData,\n        valor: parseFloat(mensualidadData.valor),\n        created_at: new Date().toISOString()\n      };\n\n      const { data, error } = await supabase\n        .from('mensualidades')\n        .insert([sanitizedData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Database error in createMensualidad:', error);\n        return { data: null, error };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error('Error creating mensualidad:', error);\n      return { \n        data: null, \n        error: { message: 'Error interno del servidor' } \n      };\n    }\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    try {\n      // Validar ID\n      if (!id || isNaN(id)) {\n        return { \n          data: null, \n          error: { message: 'ID de mensualidad inválido' } \n        };\n      }\n\n      // Sanitizar datos\n      const sanitizedData = { ...mensualidadData };\n      if (sanitizedData.valor) {\n        sanitizedData.valor = parseFloat(sanitizedData.valor);\n      }\n      sanitizedData.updated_at = new Date().toISOString();\n\n      const { data, error } = await supabase\n        .from('mensualidades')\n        .update(sanitizedData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Database error in updateMensualidad:', error);\n        return { data: null, error };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error('Error updating mensualidad:', error);\n      return { \n        data: null, \n        error: { message: 'Error interno del servidor' } \n      };\n    }\n  }\n\n  // Validar estructura de base de datos\n  async validateDatabaseStructure() {\n    const requiredTables = ['usuarios', 'participantes', 'mensualidades', 'sedes', 'fundacion'];\n    const results = {};\n\n    for (const table of requiredTables) {\n      try {\n        const { error } = await supabase\n          .from(table)\n          .select('*', { count: 'exact', head: true });\n        \n        results[table] = error ? { status: 'error', message: error.message } : { status: 'ok' };\n      } catch (err) {\n        results[table] = { status: 'error', message: err.message };\n      }\n    }\n\n    return results;\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}