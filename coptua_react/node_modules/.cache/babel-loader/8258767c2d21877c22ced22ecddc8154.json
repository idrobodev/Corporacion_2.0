{"ast":null,"code":"import WebSocketFactory from './lib/websocket-factory';\nimport { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_VERSION, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\n// Connection-related constants\nconst CONNECTION_TIMEOUTS = {\n  HEARTBEAT_INTERVAL: 25000,\n  RECONNECT_DELAY: 10,\n  HEARTBEAT_TIMEOUT_FALLBACK: 100\n};\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\nconst DEFAULT_RECONNECT_FALLBACK = 10000;\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.heartbeatCallback The optional function to handle heartbeat status.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.logLevel Sets the log level for Realtime\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessTokenValue = null;\n    this.apiKey = null;\n    this.channels = new Array();\n    this.endPoint = '';\n    this.httpEndpoint = '';\n    /** @deprecated headers cannot be set on websocket connections */\n    this.headers = {};\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = null;\n    this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.heartbeatCallback = noop;\n    this.ref = 0;\n    this.reconnectTimer = null;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.accessToken = null;\n    this._connectionState = 'disconnected';\n    this._wasManualDisconnect = false;\n    this._authPromise = null;\n    /**\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\n     *\n     * @internal\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        // Node.js environment without native fetch\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args)).catch(error => {\n          throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n        });\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    // Validate required parameters\n    if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n      throw new Error('API key is required to connect to Realtime');\n    }\n    this.apiKey = options.params.apikey;\n    // Initialize endpoint URLs\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    this.httpEndpoint = httpEndpointURL(endPoint);\n    this._initializeOptions(options);\n    this._setupReconnectionTimer();\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect() {\n    // Skip if already connecting, disconnecting, or connected\n    if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n      return;\n    }\n    this._setConnectionState('connecting');\n    this._setAuthSafely('connect');\n    // Establish WebSocket connection\n    if (this.transport) {\n      // Use custom transport if provided\n      this.conn = new this.transport(this.endpointURL());\n    } else {\n      // Try to use native WebSocket\n      try {\n        this.conn = WebSocketFactory.createWebSocket(this.endpointURL());\n      } catch (error) {\n        this._setConnectionState('disconnected');\n        const errorMessage = error.message;\n        // Provide helpful error message based on environment\n        if (errorMessage.includes('Node.js')) {\n          throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n        }\n        throw new Error(`WebSocket not available: ${errorMessage}`);\n      }\n    }\n    this._setupConnectionHandlers();\n  }\n  /**\n   * Returns the URL of the websocket.\n   * @returns string The URL of the websocket.\n   */\n  endpointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.isDisconnecting()) {\n      return;\n    }\n    this._setConnectionState('disconnecting', true);\n    if (this.conn) {\n      // Setup fallback timer to prevent hanging in disconnecting state\n      const fallbackTimer = setTimeout(() => {\n        this._setConnectionState('disconnected');\n      }, 100);\n      this.conn.onclose = () => {\n        clearTimeout(fallbackTimer);\n        this._setConnectionState('disconnected');\n      };\n      // Close the WebSocket connection\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this._teardownConnection();\n    } else {\n      this._setConnectionState('disconnected');\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n    return status;\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.channels = [];\n    this.disconnect();\n    return values_1;\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\n   * Returns `true` if the connection is currently connecting.\n   */\n  isConnecting() {\n    return this._connectionState === 'connecting';\n  }\n  /**\n   * Returns `true` if the connection is currently disconnecting.\n   */\n  isDisconnecting() {\n    return this._connectionState === 'disconnecting';\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const realtimeTopic = `realtime:${topic}`;\n    const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n    if (!exists) {\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n      this.channels.push(chan);\n      return chan;\n    } else {\n      return exists;\n    }\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\n   *\n   * On callback used, it will set the value of the token internal to the client.\n   *\n   * @param token A JWT string to override the token set on the client.\n   */\n  async setAuth(token = null) {\n    this._authPromise = this._performAuth(token);\n    try {\n      await this._authPromise;\n    } finally {\n      this._authPromise = null;\n    }\n  }\n  /**\n   * Sends a heartbeat message if the socket is connected.\n   */\n  async sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      try {\n        this.heartbeatCallback('disconnected');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      return;\n    }\n    // Handle heartbeat timeout and force reconnection if needed\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      try {\n        this.heartbeatCallback('timeout');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      // Force reconnection after heartbeat timeout\n      this._wasManualDisconnect = false;\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'heartbeat timeout');\n      setTimeout(() => {\n        var _a;\n        if (!this.isConnected()) {\n          (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n        }\n      }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n      return;\n    }\n    // Send heartbeat message to server\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    try {\n      this.heartbeatCallback('sent');\n    } catch (e) {\n      this.log('error', 'error in heartbeat callback', e);\n    }\n    this._setAuthSafely('heartbeat');\n  }\n  onHeartbeat(callback) {\n    this.heartbeatCallback = callback;\n  }\n  /**\n   * Flushes send buffer\n   */\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c.topic !== channel.topic);\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      // Handle heartbeat responses\n      if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n        try {\n          this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n      }\n      // Handle pending heartbeat reference cleanup\n      if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n      }\n      // Log incoming message\n      const {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      const refString = ref ? `(${ref})` : '';\n      const status = payload.status || '';\n      this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n      // Route message to appropriate channels\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this._triggerStateCallbacks('message', msg);\n    });\n  }\n  /**\n   * Clear specific timer\n   * @internal\n   */\n  _clearTimer(timer) {\n    var _a;\n    if (timer === 'heartbeat' && this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = undefined;\n    } else if (timer === 'reconnect') {\n      (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n    }\n  }\n  /**\n   * Clear all timers\n   * @internal\n   */\n  _clearAllTimers() {\n    this._clearTimer('heartbeat');\n    this._clearTimer('reconnect');\n  }\n  /**\n   * Setup connection handlers for WebSocket events\n   * @internal\n   */\n  _setupConnectionHandlers() {\n    if (!this.conn) return;\n    // Set binary type if supported (browsers and most WebSocket implementations)\n    if ('binaryType' in this.conn) {\n      ;\n      this.conn.binaryType = 'arraybuffer';\n    }\n    this.conn.onopen = () => this._onConnOpen();\n    this.conn.onerror = error => this._onConnError(error);\n    this.conn.onmessage = event => this._onConnMessage(event);\n    this.conn.onclose = event => this._onConnClose(event);\n  }\n  /**\n   * Teardown connection and cleanup resources\n   * @internal\n   */\n  _teardownConnection() {\n    if (this.conn) {\n      this.conn.onopen = null;\n      this.conn.onerror = null;\n      this.conn.onmessage = null;\n      this.conn.onclose = null;\n      this.conn = null;\n    }\n    this._clearAllTimers();\n    this.channels.forEach(channel => channel.teardown());\n  }\n  /** @internal */\n  _onConnOpen() {\n    this._setConnectionState('connected');\n    this.log('transport', `connected to ${this.endpointURL()}`);\n    this.flushSendBuffer();\n    this._clearTimer('reconnect');\n    if (!this.worker) {\n      this._startHeartbeat();\n    } else {\n      if (!this.workerRef) {\n        this._startWorkerHeartbeat();\n      }\n    }\n    this._triggerStateCallbacks('open');\n  }\n  /** @internal */\n  _startHeartbeat() {\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n  }\n  /** @internal */\n  _startWorkerHeartbeat() {\n    if (this.workerUrl) {\n      this.log('worker', `starting worker for from ${this.workerUrl}`);\n    } else {\n      this.log('worker', `starting default worker`);\n    }\n    const objectUrl = this._workerObjectUrl(this.workerUrl);\n    this.workerRef = new Worker(objectUrl);\n    this.workerRef.onerror = error => {\n      this.log('worker', 'worker error', error.message);\n      this.workerRef.terminate();\n    };\n    this.workerRef.onmessage = event => {\n      if (event.data.event === 'keepAlive') {\n        this.sendHeartbeat();\n      }\n    };\n    this.workerRef.postMessage({\n      event: 'start',\n      interval: this.heartbeatIntervalMs\n    });\n  }\n  /** @internal */\n  _onConnClose(event) {\n    var _a;\n    this._setConnectionState('disconnected');\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this._clearTimer('heartbeat');\n    // Only schedule reconnection if it wasn't a manual disconnect\n    if (!this._wasManualDisconnect) {\n      (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n    }\n    this._triggerStateCallbacks('close', event);\n  }\n  /** @internal */\n  _onConnError(error) {\n    this._setConnectionState('disconnected');\n    this.log('transport', `${error}`);\n    this._triggerChanError();\n    this._triggerStateCallbacks('error', error);\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  _workerObjectUrl(url) {\n    let result_url;\n    if (url) {\n      result_url = url;\n    } else {\n      const blob = new Blob([WORKER_SCRIPT], {\n        type: 'application/javascript'\n      });\n      result_url = URL.createObjectURL(blob);\n    }\n    return result_url;\n  }\n  /**\n   * Set connection state with proper state management\n   * @internal\n   */\n  _setConnectionState(state, manual = false) {\n    this._connectionState = state;\n    if (state === 'connecting') {\n      this._wasManualDisconnect = false;\n    } else if (state === 'disconnecting') {\n      this._wasManualDisconnect = manual;\n    }\n  }\n  /**\n   * Perform the actual auth operation\n   * @internal\n   */\n  async _performAuth(token = null) {\n    let tokenToSend;\n    if (token) {\n      tokenToSend = token;\n    } else if (this.accessToken) {\n      // Always call the accessToken callback to get fresh token\n      tokenToSend = await this.accessToken();\n    } else {\n      tokenToSend = this.accessTokenValue;\n    }\n    if (this.accessTokenValue != tokenToSend) {\n      this.accessTokenValue = tokenToSend;\n      this.channels.forEach(channel => {\n        const payload = {\n          access_token: tokenToSend,\n          version: DEFAULT_VERSION\n        };\n        tokenToSend && channel.updateJoinPayload(payload);\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: tokenToSend\n          });\n        }\n      });\n    }\n  }\n  /**\n   * Wait for any in-flight auth operations to complete\n   * @internal\n   */\n  async _waitForAuthIfNeeded() {\n    if (this._authPromise) {\n      await this._authPromise;\n    }\n  }\n  /**\n   * Safely call setAuth with standardized error handling\n   * @internal\n   */\n  _setAuthSafely(context = 'general') {\n    this.setAuth().catch(e => {\n      this.log('error', `error setting auth in ${context}`, e);\n    });\n  }\n  /**\n   * Trigger state change callbacks with proper error handling\n   * @internal\n   */\n  _triggerStateCallbacks(event, data) {\n    try {\n      this.stateChangeCallbacks[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (e) {\n          this.log('error', `error in ${event} callback`, e);\n        }\n      });\n    } catch (e) {\n      this.log('error', `error triggering ${event} callbacks`, e);\n    }\n  }\n  /**\n   * Setup reconnection timer with proper configuration\n   * @internal\n   */\n  _setupReconnectionTimer() {\n    this.reconnectTimer = new Timer(async () => {\n      setTimeout(async () => {\n        await this._waitForAuthIfNeeded();\n        if (!this.isConnected()) {\n          this.connect();\n        }\n      }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n    }, this.reconnectAfterMs);\n  }\n  /**\n   * Initialize client options with defaults\n   * @internal\n   */\n  _initializeOptions(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    // Set defaults\n    this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n    this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n    this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n    this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n    this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n    // Handle special cases\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n      this.logLevel = options.logLevel || options.log_level;\n      this.params = Object.assign(Object.assign({}, this.params), {\n        log_level: this.logLevel\n      });\n    }\n    // Set up functions with defaults\n    this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n      return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n    };\n    this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n    // Handle worker setup\n    if (this.worker) {\n      if (typeof window !== 'undefined' && !window.Worker) {\n        throw new Error('Web Worker is not supported');\n      }\n      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n    }\n  }\n}","map":{"version":3,"sources":["../../src/RealtimeClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import WebSocketFactory from './lib/websocket-factory';\nimport { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_VERSION, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL, } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\n// Connection-related constants\nconst CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100,\n};\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\nconst DEFAULT_RECONNECT_FALLBACK = 10000;\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessTokenValue = null;\n        this.apiKey = null;\n        this.channels = new Array();\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        /** @deprecated headers cannot be set on websocket connections */\n        this.headers = {};\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.transport = null;\n        this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.heartbeatCallback = noop;\n        this.ref = 0;\n        this.reconnectTimer = null;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.accessToken = null;\n        this._connectionState = 'disconnected';\n        this._wasManualDisconnect = false;\n        this._authPromise = null;\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                // Node.js environment without native fetch\n                _fetch = (...args) => import('@supabase/node-fetch')\n                    .then(({ default: fetch }) => fetch(...args))\n                    .catch((error) => {\n                    throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` +\n                        `This is required for HTTP requests in Node.js environments without native fetch.`);\n                });\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        // Validate required parameters\n        if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n            throw new Error('API key is required to connect to Realtime');\n        }\n        this.apiKey = options.params.apikey;\n        // Initialize endpoint URLs\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        this.httpEndpoint = httpEndpointURL(endPoint);\n        this._initializeOptions(options);\n        this._setupReconnectionTimer();\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        // Skip if already connecting, disconnecting, or connected\n        if (this.isConnecting() ||\n            this.isDisconnecting() ||\n            (this.conn !== null && this.isConnected())) {\n            return;\n        }\n        this._setConnectionState('connecting');\n        this._setAuthSafely('connect');\n        // Establish WebSocket connection\n        if (this.transport) {\n            // Use custom transport if provided\n            this.conn = new this.transport(this.endpointURL());\n        }\n        else {\n            // Try to use native WebSocket\n            try {\n                this.conn = WebSocketFactory.createWebSocket(this.endpointURL());\n            }\n            catch (error) {\n                this._setConnectionState('disconnected');\n                const errorMessage = error.message;\n                // Provide helpful error message based on environment\n                if (errorMessage.includes('Node.js')) {\n                    throw new Error(`${errorMessage}\\n\\n` +\n                        'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' +\n                        'Option 1: Use Node.js 22+ which has native WebSocket support\\n' +\n                        'Option 2: Install and provide the \"ws\" package:\\n\\n' +\n                        '  npm install ws\\n\\n' +\n                        '  import ws from \"ws\"\\n' +\n                        '  const client = new RealtimeClient(url, {\\n' +\n                        '    ...options,\\n' +\n                        '    transport: ws\\n' +\n                        '  })');\n                }\n                throw new Error(`WebSocket not available: ${errorMessage}`);\n            }\n        }\n        this._setupConnectionHandlers();\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.isDisconnecting()) {\n            return;\n        }\n        this._setConnectionState('disconnecting', true);\n        if (this.conn) {\n            // Setup fallback timer to prevent hanging in disconnecting state\n            const fallbackTimer = setTimeout(() => {\n                this._setConnectionState('disconnected');\n            }, 100);\n            this.conn.onclose = () => {\n                clearTimeout(fallbackTimer);\n                this._setConnectionState('disconnected');\n            };\n            // Close the WebSocket connection\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this._teardownConnection();\n        }\n        else {\n            this._setConnectionState('disconnected');\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.channels = [];\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    /**\n     * Returns `true` if the connection is currently connecting.\n     */\n    isConnecting() {\n        return this._connectionState === 'connecting';\n    }\n    /**\n     * Returns `true` if the connection is currently disconnecting.\n     */\n    isDisconnecting() {\n        return this._connectionState === 'disconnecting';\n    }\n    channel(topic, params = { config: {} }) {\n        const realtimeTopic = `realtime:${topic}`;\n        const exists = this.getChannels().find((c) => c.topic === realtimeTopic);\n        if (!exists) {\n            const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n            this.channels.push(chan);\n            return chan;\n        }\n        else {\n            return exists;\n        }\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n        this._authPromise = this._performAuth(token);\n        try {\n            await this._authPromise;\n        }\n        finally {\n            this._authPromise = null;\n        }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            try {\n                this.heartbeatCallback('disconnected');\n            }\n            catch (e) {\n                this.log('error', 'error in heartbeat callback', e);\n            }\n            return;\n        }\n        // Handle heartbeat timeout and force reconnection if needed\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            try {\n                this.heartbeatCallback('timeout');\n            }\n            catch (e) {\n                this.log('error', 'error in heartbeat callback', e);\n            }\n            // Force reconnection after heartbeat timeout\n            this._wasManualDisconnect = false;\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'heartbeat timeout');\n            setTimeout(() => {\n                var _a;\n                if (!this.isConnected()) {\n                    (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n                }\n            }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n            return;\n        }\n        // Send heartbeat message to server\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        try {\n            this.heartbeatCallback('sent');\n        }\n        catch (e) {\n            this.log('error', 'error in heartbeat callback', e);\n        }\n        this._setAuthSafely('heartbeat');\n    }\n    onHeartbeat(callback) {\n        this.heartbeatCallback = callback;\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c.topic !== channel.topic);\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            // Handle heartbeat responses\n            if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n                try {\n                    this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n                }\n                catch (e) {\n                    this.log('error', 'error in heartbeat callback', e);\n                }\n            }\n            // Handle pending heartbeat reference cleanup\n            if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            // Log incoming message\n            const { topic, event, payload, ref } = msg;\n            const refString = ref ? `(${ref})` : '';\n            const status = payload.status || '';\n            this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n            // Route message to appropriate channels\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this._triggerStateCallbacks('message', msg);\n        });\n    }\n    /**\n     * Clear specific timer\n     * @internal\n     */\n    _clearTimer(timer) {\n        var _a;\n        if (timer === 'heartbeat' && this.heartbeatTimer) {\n            clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = undefined;\n        }\n        else if (timer === 'reconnect') {\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n    }\n    /**\n     * Clear all timers\n     * @internal\n     */\n    _clearAllTimers() {\n        this._clearTimer('heartbeat');\n        this._clearTimer('reconnect');\n    }\n    /**\n     * Setup connection handlers for WebSocket events\n     * @internal\n     */\n    _setupConnectionHandlers() {\n        if (!this.conn)\n            return;\n        // Set binary type if supported (browsers and most WebSocket implementations)\n        if ('binaryType' in this.conn) {\n            ;\n            this.conn.binaryType = 'arraybuffer';\n        }\n        this.conn.onopen = () => this._onConnOpen();\n        this.conn.onerror = (error) => this._onConnError(error);\n        this.conn.onmessage = (event) => this._onConnMessage(event);\n        this.conn.onclose = (event) => this._onConnClose(event);\n    }\n    /**\n     * Teardown connection and cleanup resources\n     * @internal\n     */\n    _teardownConnection() {\n        if (this.conn) {\n            this.conn.onopen = null;\n            this.conn.onerror = null;\n            this.conn.onmessage = null;\n            this.conn.onclose = null;\n            this.conn = null;\n        }\n        this._clearAllTimers();\n        this.channels.forEach((channel) => channel.teardown());\n    }\n    /** @internal */\n    _onConnOpen() {\n        this._setConnectionState('connected');\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this._clearTimer('reconnect');\n        if (!this.worker) {\n            this._startHeartbeat();\n        }\n        else {\n            if (!this.workerRef) {\n                this._startWorkerHeartbeat();\n            }\n        }\n        this._triggerStateCallbacks('open');\n    }\n    /** @internal */\n    _startHeartbeat() {\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n    /** @internal */\n    _startWorkerHeartbeat() {\n        if (this.workerUrl) {\n            this.log('worker', `starting worker for from ${this.workerUrl}`);\n        }\n        else {\n            this.log('worker', `starting default worker`);\n        }\n        const objectUrl = this._workerObjectUrl(this.workerUrl);\n        this.workerRef = new Worker(objectUrl);\n        this.workerRef.onerror = (error) => {\n            this.log('worker', 'worker error', error.message);\n            this.workerRef.terminate();\n        };\n        this.workerRef.onmessage = (event) => {\n            if (event.data.event === 'keepAlive') {\n                this.sendHeartbeat();\n            }\n        };\n        this.workerRef.postMessage({\n            event: 'start',\n            interval: this.heartbeatIntervalMs,\n        });\n    }\n    /** @internal */\n    _onConnClose(event) {\n        var _a;\n        this._setConnectionState('disconnected');\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this._clearTimer('heartbeat');\n        // Only schedule reconnection if it wasn't a manual disconnect\n        if (!this._wasManualDisconnect) {\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n        }\n        this._triggerStateCallbacks('close', event);\n    }\n    /** @internal */\n    _onConnError(error) {\n        this._setConnectionState('disconnected');\n        this.log('transport', `${error}`);\n        this._triggerChanError();\n        this._triggerStateCallbacks('error', error);\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n        let result_url;\n        if (url) {\n            result_url = url;\n        }\n        else {\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\n            result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n    }\n    /**\n     * Set connection state with proper state management\n     * @internal\n     */\n    _setConnectionState(state, manual = false) {\n        this._connectionState = state;\n        if (state === 'connecting') {\n            this._wasManualDisconnect = false;\n        }\n        else if (state === 'disconnecting') {\n            this._wasManualDisconnect = manual;\n        }\n    }\n    /**\n     * Perform the actual auth operation\n     * @internal\n     */\n    async _performAuth(token = null) {\n        let tokenToSend;\n        if (token) {\n            tokenToSend = token;\n        }\n        else if (this.accessToken) {\n            // Always call the accessToken callback to get fresh token\n            tokenToSend = await this.accessToken();\n        }\n        else {\n            tokenToSend = this.accessTokenValue;\n        }\n        if (this.accessTokenValue != tokenToSend) {\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach((channel) => {\n                const payload = {\n                    access_token: tokenToSend,\n                    version: DEFAULT_VERSION,\n                };\n                tokenToSend && channel.updateJoinPayload(payload);\n                if (channel.joinedOnce && channel._isJoined()) {\n                    channel._push(CHANNEL_EVENTS.access_token, {\n                        access_token: tokenToSend,\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Wait for any in-flight auth operations to complete\n     * @internal\n     */\n    async _waitForAuthIfNeeded() {\n        if (this._authPromise) {\n            await this._authPromise;\n        }\n    }\n    /**\n     * Safely call setAuth with standardized error handling\n     * @internal\n     */\n    _setAuthSafely(context = 'general') {\n        this.setAuth().catch((e) => {\n            this.log('error', `error setting auth in ${context}`, e);\n        });\n    }\n    /**\n     * Trigger state change callbacks with proper error handling\n     * @internal\n     */\n    _triggerStateCallbacks(event, data) {\n        try {\n            this.stateChangeCallbacks[event].forEach((callback) => {\n                try {\n                    callback(data);\n                }\n                catch (e) {\n                    this.log('error', `error in ${event} callback`, e);\n                }\n            });\n        }\n        catch (e) {\n            this.log('error', `error triggering ${event} callbacks`, e);\n        }\n    }\n    /**\n     * Setup reconnection timer with proper configuration\n     * @internal\n     */\n    _setupReconnectionTimer() {\n        this.reconnectTimer = new Timer(async () => {\n            setTimeout(async () => {\n                await this._waitForAuthIfNeeded();\n                if (!this.isConnected()) {\n                    this.connect();\n                }\n            }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n        }, this.reconnectAfterMs);\n    }\n    /**\n     * Initialize client options with defaults\n     * @internal\n     */\n    _initializeOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        // Set defaults\n        this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n        this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs =\n            (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n        this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n        this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n        this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n        // Handle special cases\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n            this.logLevel = options.logLevel || options.log_level;\n            this.params = Object.assign(Object.assign({}, this.params), { log_level: this.logLevel });\n        }\n        // Set up functions with defaults\n        this.reconnectAfterMs =\n            (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : ((tries) => {\n                return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n            });\n        this.encode =\n            (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : ((payload, callback) => {\n                return callback(JSON.stringify(payload));\n            });\n        this.decode =\n            (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n        // Handle worker setup\n        if (this.worker) {\n            if (typeof window !== 'undefined' && !window.Worker) {\n                throw new Error('Web Worker is not supported');\n            }\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map"]},"metadata":{},"sourceType":"module"}