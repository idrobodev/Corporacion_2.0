{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError, FunctionRegion } from './types';\nexport class FunctionsClient {\n  constructor(url, {\n    headers = {},\n    customFetch,\n    region = FunctionRegion.Any\n  } = {}) {\n    this.url = url;\n    this.headers = headers;\n    this.region = region;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  invoke(functionName, options = {}) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          headers,\n          method,\n          body: functionArgs\n        } = options;\n        let _headers = {};\n        let {\n          region\n        } = options;\n        if (!region) {\n          region = this.region;\n        }\n        // Add region as query parameter using URL API\n        const url = new URL(`${this.url}/${functionName}`);\n        if (region && region !== 'any') {\n          _headers['x-region'] = region;\n          url.searchParams.set('forceFunctionRegion', region);\n        }\n        let body;\n        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type') || !headers)) {\n          if (typeof Blob !== 'undefined' && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {\n            // will work for File as File inherits Blob\n            // also works for ArrayBuffer as it is the same underlying structure as a Blob\n            _headers['Content-Type'] = 'application/octet-stream';\n            body = functionArgs;\n          } else if (typeof functionArgs === 'string') {\n            // plain string\n            _headers['Content-Type'] = 'text/plain';\n            body = functionArgs;\n          } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n            // don't set content-type headers\n            // Request will automatically add the right boundary value\n            body = functionArgs;\n          } else {\n            // default, assume this is JSON\n            _headers['Content-Type'] = 'application/json';\n            body = JSON.stringify(functionArgs);\n          }\n        }\n        const response = yield this.fetch(url.toString(), {\n          method: method || 'POST',\n          // headers priority is (high to low):\n          // 1. invoke-level headers\n          // 2. client-level headers\n          // 3. default Content-Type header\n          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n          body\n        }).catch(fetchError => {\n          throw new FunctionsFetchError(fetchError);\n        });\n        const isRelayError = response.headers.get('x-relay-error');\n        if (isRelayError && isRelayError === 'true') {\n          throw new FunctionsRelayError(response);\n        }\n        if (!response.ok) {\n          throw new FunctionsHttpError(response);\n        }\n        let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n        let data;\n        if (responseType === 'application/json') {\n          data = yield response.json();\n        } else if (responseType === 'application/octet-stream') {\n          data = yield response.blob();\n        } else if (responseType === 'text/event-stream') {\n          data = response;\n        } else if (responseType === 'multipart/form-data') {\n          data = yield response.formData();\n        } else {\n          // default to text\n          data = yield response.text();\n        }\n        return {\n          data,\n          error: null,\n          response\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error,\n          response: error instanceof FunctionsHttpError || error instanceof FunctionsRelayError ? error.context : undefined\n        };\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../src/FunctionsClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError, FunctionRegion, } from './types';\nexport class FunctionsClient {\n    constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any, } = {}) {\n        this.url = url;\n        this.headers = headers;\n        this.region = region;\n        this.fetch = resolveFetch(customFetch);\n    }\n    /**\n     * Updates the authorization header\n     * @param token - the new jwt token sent in the authorisation header\n     */\n    setAuth(token) {\n        this.headers.Authorization = `Bearer ${token}`;\n    }\n    /**\n     * Invokes a function\n     * @param functionName - The name of the Function to invoke.\n     * @param options - Options for invoking the Function.\n     */\n    invoke(functionName, options = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers, method, body: functionArgs } = options;\n                let _headers = {};\n                let { region } = options;\n                if (!region) {\n                    region = this.region;\n                }\n                // Add region as query parameter using URL API\n                const url = new URL(`${this.url}/${functionName}`);\n                if (region && region !== 'any') {\n                    _headers['x-region'] = region;\n                    url.searchParams.set('forceFunctionRegion', region);\n                }\n                let body;\n                if (functionArgs &&\n                    ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)) {\n                    if ((typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n                        functionArgs instanceof ArrayBuffer) {\n                        // will work for File as File inherits Blob\n                        // also works for ArrayBuffer as it is the same underlying structure as a Blob\n                        _headers['Content-Type'] = 'application/octet-stream';\n                        body = functionArgs;\n                    }\n                    else if (typeof functionArgs === 'string') {\n                        // plain string\n                        _headers['Content-Type'] = 'text/plain';\n                        body = functionArgs;\n                    }\n                    else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n                        // don't set content-type headers\n                        // Request will automatically add the right boundary value\n                        body = functionArgs;\n                    }\n                    else {\n                        // default, assume this is JSON\n                        _headers['Content-Type'] = 'application/json';\n                        body = JSON.stringify(functionArgs);\n                    }\n                }\n                const response = yield this.fetch(url.toString(), {\n                    method: method || 'POST',\n                    // headers priority is (high to low):\n                    // 1. invoke-level headers\n                    // 2. client-level headers\n                    // 3. default Content-Type header\n                    headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n                    body,\n                }).catch((fetchError) => {\n                    throw new FunctionsFetchError(fetchError);\n                });\n                const isRelayError = response.headers.get('x-relay-error');\n                if (isRelayError && isRelayError === 'true') {\n                    throw new FunctionsRelayError(response);\n                }\n                if (!response.ok) {\n                    throw new FunctionsHttpError(response);\n                }\n                let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n                let data;\n                if (responseType === 'application/json') {\n                    data = yield response.json();\n                }\n                else if (responseType === 'application/octet-stream') {\n                    data = yield response.blob();\n                }\n                else if (responseType === 'text/event-stream') {\n                    data = response;\n                }\n                else if (responseType === 'multipart/form-data') {\n                    data = yield response.formData();\n                }\n                else {\n                    // default to text\n                    data = yield response.text();\n                }\n                return { data, error: null, response };\n            }\n            catch (error) {\n                return {\n                    data: null,\n                    error,\n                    response: error instanceof FunctionsHttpError || error instanceof FunctionsRelayError\n                        ? error.context\n                        : undefined,\n                };\n            }\n        });\n    }\n}\n//# sourceMappingURL=FunctionsClient.js.map"]},"metadata":{},"sourceType":"module"}